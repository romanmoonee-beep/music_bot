# Makefile –¥–ª—è Music Universe Bot
.PHONY: help up down logs status clean build test lint format migrate backup restore

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN=\033[0;32m
YELLOW=\033[1;33m
RED=\033[0;31m
NC=\033[0m # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DOCKER_COMPOSE=docker-compose
DOCKER_COMPOSE_DEV=$(DOCKER_COMPOSE) -f docker-compose.yml -f docker-compose.override.yml
PROJECT_NAME=music_bot

# –ü–æ–º–æ—â—å
help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "$(GREEN)Music Universe Bot - –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# === DOCKER –ö–û–ú–ê–ù–î–´ ===

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(GREEN)üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!$(NC)"
	@echo "$(YELLOW)üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:$(NC)"
	@echo "  Bot Health:     http://localhost:8000/health"
	@echo "  Admin API:      http://localhost:8001/docs"
	@echo "  Grafana:        http://localhost:3000 (admin/admin)"
	@echo "  Prometheus:     http://localhost:9090"
	@echo "  MinIO Console:  http://localhost:9001"

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(RED)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) restart
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	$(DOCKER_COMPOSE) logs -f

logs-bot: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞
	$(DOCKER_COMPOSE) logs -f bot

logs-api: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ API
	$(DOCKER_COMPOSE) logs -f api

logs-worker: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
	$(DOCKER_COMPOSE) logs -f celery_worker

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	$(DOCKER_COMPOSE) ps
	@echo ""
	@echo "$(YELLOW)üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:$(NC)"
	docker stats --no-stream

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@curl -s http://localhost:8000/health | jq . || echo "$(RED)‚ùå Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"
	@curl -s http://localhost:8001/health | jq . || echo "$(RED)‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"

build: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã
	@echo "$(YELLOW)üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) build --no-cache
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω—ã$(NC)"

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Docker —Ä–µ—Å—É—Ä—Å—ã
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker system prune -f
	docker volume prune -f
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# === –†–ê–ó–†–ê–ë–û–¢–ö–ê ===

dev-deps: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üîß –ó–∞–ø—É—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	$(DOCKER_COMPOSE) up -d postgres redis minio meilisearch clickhouse
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω—ã$(NC)"

dev-bot: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	poetry run python -m app.bot.main

dev-api: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üåê –ó–∞–ø—É—Å–∫ API –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	poetry run uvicorn app.api.main:app --reload --host 0.0.0.0 --port 8001

dev-worker: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Celery worker
	@echo "$(GREEN)‚ö° –ó–∞–ø—É—Å–∫ Celery worker...$(NC)"
	poetry run celery -A app.tasks.celery worker --loglevel=info --reload

dev-beat: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Celery beat scheduler
	@echo "$(GREEN)‚è∞ –ó–∞–ø—É—Å–∫ Celery beat...$(NC)"
	poetry run celery -A app.tasks.celery beat --loglevel=info

dev-flower: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Flower (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Celery)
	@echo "$(GREEN)üå∏ –ó–∞–ø—É—Å–∫ Flower...$(NC)"
	poetry run celery -A app.tasks.celery flower --port=5555

dev-shell: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –æ–±–æ–ª–æ—á–∫—É
	@echo "$(GREEN)üêö –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±–æ–ª–æ—á–∫–∏...$(NC)"
	poetry run python -c "from app.core import *; import asyncio"

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===

migrate: ## –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...$(NC)"
	poetry run alembic upgrade head
	@echo "$(GREEN)‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã$(NC)"

migration: ## –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (make migration name="–Ω–∞–∑–≤–∞–Ω–∏–µ")
	@echo "$(GREEN)üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: $(name)$(NC)"
	poetry run alembic revision --autogenerate -m "$(name)"

db-reset: ## –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@echo "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 'yes': " && read ans && [ $${ans:-N} = yes ]
	$(DOCKER_COMPOSE) stop postgres
	docker volume rm $(PROJECT_NAME)_postgres_data
	$(DOCKER_COMPOSE) up -d postgres
	@echo "$(YELLOW)–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ PostgreSQL...$(NC)"
	@sleep 10
	$(MAKE) migrate
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞$(NC)"

backup: ## –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(GREEN)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@mkdir -p backups
	docker exec $(PROJECT_NAME)_postgres_1 pg_dump -U music_bot music_bot | gzip > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql.gz
	@echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/$(NC)"

restore: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞ (make restore file=backup_file.sql.gz)
	@echo "$(YELLOW)üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $(file)$(NC)"
	@echo "$(RED)‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@echo "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 'yes': " && read ans && [ $${ans:-N} = yes ]
	gunzip -c backups/$(file) | docker exec -i $(PROJECT_NAME)_postgres_1 psql -U music_bot -d music_bot
	@echo "$(GREEN)‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –±—ç–∫–∞–ø–∞$(NC)"

# === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	poetry run pytest -v --cov=app --cov-report=html --cov-report=term

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üî¨ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...$(NC)"
	poetry run pytest tests/unit/ -v

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤...$(NC)"
	poetry run pytest tests/integration/ -v

test-api: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ API —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)üåê –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	poetry run pytest tests/api/ -v

test-bot: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Bot —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)ü§ñ –ó–∞–ø—É—Å–∫ Bot —Ç–µ—Å—Ç–æ–≤...$(NC)"
	poetry run pytest tests/bot/ -v

test-watch: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
	@echo "$(GREEN)üëÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...$(NC)"
	poetry run pytest-watch -- --cov=app

test-coverage: ## –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–µ—Å—Ç–∞–º–∏
	@echo "$(GREEN)üìä –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...$(NC)"
	poetry run python -m webbrowser htmlcov/index.html

# === –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê ===

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏
	@echo "$(GREEN)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏...$(NC)"
	poetry run flake8 app tests
	poetry run mypy app
	@echo "$(GREEN)‚úÖ –õ–∏–Ω—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	@echo "$(GREEN)‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	poetry run black app tests
	poetry run isort app tests
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(NC)"

format-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	@echo "$(GREEN)üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...$(NC)"
	poetry run black --check app tests
	poetry run isort --check-only app tests

mypy: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã
	@echo "$(GREEN)üî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤...$(NC)"
	poetry run mypy app

pre-commit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å pre-commit —Ö—É–∫–∏
	@echo "$(GREEN)üîó –ó–∞–ø—É—Å–∫ pre-commit —Ö—É–∫–æ–≤...$(NC)"
	poetry run pre-commit run --all-files

security: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
	@echo "$(GREEN)üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...$(NC)"
	poetry run bandit -r app
	poetry run safety check

# === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===

metrics: ## –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(GREEN)üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:$(NC)"
	@curl -s http://localhost:8000/metrics || echo "$(RED)‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã$(NC)"

monitoring: ## –û—Ç–∫—Ä—ã—Ç—å Grafana
	@echo "$(GREEN)üìä –û—Ç–∫—Ä—ã—Ç–∏–µ Grafana...$(NC)"
	@python -m webbrowser http://localhost:3000

prometheus: ## –û—Ç–∫—Ä—ã—Ç—å Prometheus
	@echo "$(GREEN)üî• –û—Ç–∫—Ä—ã—Ç–∏–µ Prometheus...$(NC)"
	@python -m webbrowser http://localhost:9090

flower: ## –û—Ç–∫—Ä—ã—Ç—å Flower (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Celery)
	@echo "$(GREEN)üå∏ –û—Ç–∫—Ä—ã—Ç–∏–µ Flower...$(NC)"
	@python -m webbrowser http://localhost:5555

# === –£–°–¢–ê–ù–û–í–ö–ê ===

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	poetry install
	poetry run pre-commit install
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

install-dev: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(GREEN)üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	poetry install --with dev
	poetry run pre-commit install
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

update: ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(GREEN)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	poetry update
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# === DEPLOYMENT ===

deploy-staging: ## –î–µ–ø–ª–æ–π –Ω–∞ staging
	@echo "$(YELLOW)üöÄ –î–µ–ø–ª–æ–π –Ω–∞ staging...$(NC)"
	docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d --build
	@echo "$(GREEN)‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ staging –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

deploy-prod: ## –î–µ–ø–ª–æ–π –Ω–∞ production (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
	@echo "$(RED)üö® PRODUCTION DEPLOYMENT$(NC)"
	@echo "$(YELLOW)–≠—Ç–æ —Ä–∞–∑–≤–µ—Ä–Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ production!$(NC)"
	@echo "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 'DEPLOY': " && read ans && [ ${ans:-N} = DEPLOY ]
	@echo "$(GREEN)üöÄ –î–µ–ø–ª–æ–π –Ω–∞ production...$(NC)"
	docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
	@echo "$(GREEN)‚úÖ Production –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

# === –£–¢–ò–õ–ò–¢–´ ===

env: ## –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
	@if [ ! -f .env ]; then \
		echo "$(GREEN)üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...$(NC)"; \
		cp .env.example .env; \
		echo "$(YELLOW)‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ!$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

secrets: ## –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
	@echo "$(GREEN)üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π:$(NC)"
	@echo "SECRET_KEY=$(shell python -c 'import secrets; print(secrets.token_urlsafe(32))')"
	@echo "ADMIN_API_KEY=$(shell python -c 'import secrets; print(secrets.token_urlsafe(32))')"
	@echo "POSTGRES_PASSWORD=$(shell python -c 'import secrets; print(secrets.token_urlsafe(16))')"
	@echo "REDIS_PASSWORD=$(shell python -c 'import secrets; print(secrets.token_urlsafe(16))')"

logs-error: ## –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
	@echo "$(RED)üö® –û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:$(NC)"
	$(DOCKER_COMPOSE) logs --since 1h | grep -i error || echo "$(GREEN)‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ$(NC)"

shell-bot: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –±–æ—Ç–∞
	@echo "$(GREEN)üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –±–æ—Ç–∞...$(NC)"
	docker exec -it music_bot_app bash

shell-db: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
	@echo "$(GREEN)üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...$(NC)"
	docker exec -it music_bot_postgres psql -U music_bot -d music_bot

shell-redis: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis
	@echo "$(GREEN)üóÉÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...$(NC)"
	docker exec -it music_bot_redis redis-cli

# === –û–ß–ò–°–¢–ö–ê ===

clean-logs: ## –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...$(NC)"
	rm -rf logs/*.log
	@echo "$(GREEN)‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã$(NC)"

clean-cache: ## –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à Python
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Python...$(NC)"
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –ö–µ—à Python –æ—á–∏—â–µ–Ω$(NC)"

clean-test: ## –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	rm -rf .pytest_cache htmlcov .coverage
	@echo "$(GREEN)‚úÖ –§–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã$(NC)"

clean-all: clean clean-logs clean-cache clean-test ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞

# === –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===

info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
	@echo "$(GREEN)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:$(NC)"
	@echo "Docker –≤–µ—Ä—Å–∏—è: $(docker --version)"
	@echo "Docker Compose –≤–µ—Ä—Å–∏—è: $(docker-compose --version)"
	@echo "Python –≤–µ—Ä—Å–∏—è: $(python --version)"
	@echo "Poetry –≤–µ—Ä—Å–∏—è: $(poetry --version 2>/dev/null || echo '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')"
	@echo ""
	@echo "$(GREEN)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:$(NC)"
	@echo "–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: $(find app -name "*.py" | xargs wc -l | tail -1)"
	@echo "–§–∞–π–ª–æ–≤ Python: $(find app -name "*.py" | wc -l)"
	@echo "–¢–µ—Å—Ç–æ–≤: $(find tests -name "test_*.py" | wc -l)"

urls: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ URL
	@echo "$(GREEN)üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:$(NC)"
	@echo "Bot Health Check:   http://localhost:8000/health"
	@echo "Bot Metrics:        http://localhost:8000/metrics"
	@echo ""
	@echo "Admin API Docs:     http://localhost:8001/docs"
	@echo "Admin API ReDoc:    http://localhost:8001/redoc"
	@echo "Admin API Health:   http://localhost:8001/health"
	@echo ""
	@echo "Grafana Dashboard:  http://localhost:3000 (admin/admin)"
	@echo "Prometheus:         http://localhost:9090"
	@echo "Flower (Celery):    http://localhost:5555"
	@echo "MinIO Console:      http://localhost:9001 (minioadmin/minioadmin)"

version: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(GREEN)üè∑Ô∏è Music Universe Bot$(NC)"
	@poetry version 2>/dev/null || echo "–í–µ—Ä—Å–∏—è: 1.0.0"

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
.DEFAULT_GOAL := help