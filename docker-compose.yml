version: '3.8'

services:
  # === PostgreSQL Database ===
  postgres:
    image: postgres:16-alpine
    container_name: music_bot_postgres
    environment:
      POSTGRES_DB: music_bot
      POSTGRES_USER: music_bot
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-music_bot_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - music_bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U music_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === Redis Cache & Sessions ===
  redis:
    image: redis:7.4-alpine
    container_name: music_bot_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - music_bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # === ClickHouse Analytics ===
  clickhouse:
    image: clickhouse/clickhouse-server:24.1-alpine
    container_name: music_bot_clickhouse
    environment:
      CLICKHOUSE_DB: music_analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse_password}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml
    ports:
      - "9000:9000"
      - "8123:8123"
    networks:
      - music_bot_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === MeiliSearch Full-text Search ===
  meilisearch:
    image: getmeili/meilisearch:v1.10
    container_name: music_bot_meilisearch
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_API_KEY:-meili_master_key}
      MEILI_ENV: production
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "7700:7700"
    networks:
      - music_bot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === MinIO File Storage ===
  minio:
    image: minio/minio:latest
    container_name: music_bot_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - music_bot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Main Bot Application ===
  bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.bot
    container_name: music_bot_app
    environment:
      - DATABASE_URL=postgresql+asyncpg://music_bot:${POSTGRES_PASSWORD:-music_bot_password}@postgres:5432/music_bot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      - CLICKHOUSE_HOST=clickhouse
      - MEILISEARCH_URL=http://meilisearch:7700
      - S3_ENDPOINT=minio:9000
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
    ports:
      - "8000:8000"
    networks:
      - music_bot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Celery Worker ===
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: music_bot_celery
    environment:
      - DATABASE_URL=postgresql+asyncpg://music_bot:${POSTGRES_PASSWORD:-music_bot_password}@postgres:5432/music_bot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
    networks:
      - music_bot_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    command: celery -A app.tasks.celery worker --loglevel=info --concurrency=4

  # === Celery Beat (Scheduler) ===
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: music_bot_celery_beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://music_bot:${POSTGRES_PASSWORD:-music_bot_password}@postgres:5432/music_bot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
    networks:
      - music_bot_network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    command: celery -A app.tasks.celery beat --loglevel=info

  # === FastAPI Admin Panel ===
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: music_bot_api
    environment:
      - DATABASE_URL=postgresql+asyncpg://music_bot:${POSTGRES_PASSWORD:-music_bot_password}@postgres:5432/music_bot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
    env_file:
      - .env
    ports:
      - "8001:8001"
    networks:
      - music_bot_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Nginx Reverse Proxy ===
  nginx:
    image: nginx:alpine
    container_name: music_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - music_bot_network
    depends_on:
      - bot
      - api
    restart: unless-stopped

  # === Prometheus Monitoring ===
  prometheus:
    image: prom/prometheus:latest
    container_name: music_bot_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - music_bot_network
    restart: unless-stopped

  # === Grafana Dashboard ===
  grafana:
    image: grafana/grafana:latest
    container_name: music_bot_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - music_bot_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # === Node Exporter (System Metrics) ===
  node_exporter:
    image: prom/node-exporter:latest
    container_name: music_bot_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - music_bot_network
    restart: unless-stopped

# === Networks ===
networks:
  music_bot_network:
    driver: bridge

# === Volumes ===
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  meilisearch_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local