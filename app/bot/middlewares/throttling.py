"""
Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (rate limiting)
"""
import time
import asyncio
from typing import Any, Awaitable, Callable, Dict, Optional
from datetime import datetime, timezone, timedelta

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery, InlineQuery
from aiogram.exceptions import TelegramTooManyRequests

from app.core.logging import get_logger, security_logger
from app.services.cache_service import user_cache
from app.core.config import settings


class ThrottlingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.logger = get_logger(self.__class__.__name__)
        
        # –õ–∏–º–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        self.rate_limits = {
            "message": {"limit": 30, "window": 60},      # 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
            "callback": {"limit": 50, "window": 60},     # 50 –∫–æ–ª–ª–±–µ–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            "inline": {"limit": 100, "window": 60},      # 100 inline –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            "search": {"limit": 20, "window": 60},       # 20 –ø–æ–∏—Å–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            "download": {"limit": 10, "window": 60},     # 10 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
        }
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ middleware"""
        
        user = data.get("user")
        if not user:
            return await handler(event, data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        action_type = self._get_action_type(event, data)
        if not action_type:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        is_allowed, remaining, reset_time = await self._check_rate_limit(
            user.telegram_id, 
            action_type,
            data.get("is_premium", False)
        )
        
        if not is_allowed:
            await self._handle_rate_limit_exceeded(
                event, 
                user.telegram_id, 
                action_type,
                remaining, 
                reset_time
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –≤ –¥–∞–Ω–Ω—ã–µ
        data["rate_limit_remaining"] = remaining
        data["rate_limit_reset"] = reset_time
        
        try:
            result = await handler(event, data)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            await self._record_action(user.telegram_id, action_type)
            
            return result
            
        except TelegramTooManyRequests as e:
            # Telegram API rate limit
            self.logger.warning(f"Telegram API rate limit for user {user.telegram_id}: {e}")
            await asyncio.sleep(e.retry_after or 1)
            raise
        except Exception:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞)
            await self._record_action(user.telegram_id, action_type)
            raise
    
    def _get_action_type(self, event: TelegramObject, data: Dict[str, Any]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è rate limiting"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ callback data –∏–ª–∏ —Ç–µ–∫—Å—Ç—É
        if isinstance(event, CallbackQuery):
            if event.data:
                if event.data.startswith("search:") or event.data.startswith("find:"):
                    return "search"
                elif event.data.startswith("download:") or event.data.startswith("get:"):
                    return "download"
                return "callback"
        
        elif isinstance(event, Message):
            if event.text:
                # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
                if not event.text.startswith("/") and len(event.text) > 2:
                    return "search"
            return "message"
        
        elif isinstance(event, InlineQuery):
            return "inline"
        
        return None
    
    async def _check_rate_limit(
        self, 
        user_id: int, 
        action_type: str, 
        is_premium: bool
    ) -> tuple[bool, int, datetime]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        base_limits = self.rate_limits.get(action_type, {"limit": 10, "window": 60})
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_premium:
            limit = int(base_limits["limit"] * 2)
        else:
            limit = base_limits["limit"]
        
        window = base_limits["window"]
        
        # –ö–ª—é—á –¥–ª—è –∫–µ—à–∞
        cache_key = f"rate_limit:{user_id}:{action_type}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
        current_data = await user_cache.get(cache_key, "rate_limit")
        
        now = time.time()
        reset_time = datetime.now(timezone.utc) + timedelta(seconds=window)
        
        if not current_data:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
            await user_cache.set(
                cache_key, 
                {"count": 0, "window_start": now},
                ttl=window,
                cache_type="rate_limit"
            )
            return True, limit - 1, reset_time
        
        window_start = current_data.get("window_start", now)
        count = current_data.get("count", 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –æ–∫–Ω–æ
        if now - window_start > window:
            # –ù–æ–≤–æ–µ –æ–∫–Ω–æ
            await user_cache.set(
                cache_key,
                {"count": 0, "window_start": now},
                ttl=window,
                cache_type="rate_limit"
            )
            return True, limit - 1, reset_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if count >= limit:
            remaining_time = window - (now - window_start)
            reset_time = datetime.now(timezone.utc) + timedelta(seconds=remaining_time)
            return False, 0, reset_time
        
        return True, limit - count - 1, reset_time
    
    async def _record_action(self, user_id: int, action_type: str) -> None:
        """–ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        cache_key = f"rate_limit:{user_id}:{action_type}"
        
        current_data = await user_cache.get(cache_key, "rate_limit")
        if current_data:
            current_data["count"] = current_data.get("count", 0) + 1
            await user_cache.set(
                cache_key,
                current_data,
                ttl=self.rate_limits.get(action_type, {}).get("window", 60),
                cache_type="rate_limit"
            )
    
    async def _handle_rate_limit_exceeded(
        self,
        event: TelegramObject,
        user_id: int,
        action_type: str,
        remaining: int,
        reset_time: datetime
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit"""
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        await security_logger.log_rate_limit_exceeded(
            user_id=user_id,
            limit_type=action_type,
            current_count=0,  # –ú—ã –Ω–µ –∑–Ω–∞–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–µ—Å—å
            limit=self.rate_limits.get(action_type, {}).get("limit", 0)
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        action_names = {
            "message": "—Å–æ–æ–±—â–µ–Ω–∏–π",
            "callback": "–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫", 
            "inline": "inline –∑–∞–ø—Ä–æ—Å–æ–≤",
            "search": "–ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            "download": "—Å–∫–∞—á–∏–≤–∞–Ω–∏–π"
        }
        
        action_name = action_names.get(action_type, "–¥–µ–π—Å—Ç–≤–∏–π")
        
        # –í—Ä–µ–º—è –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞
        time_left = reset_time - datetime.now(timezone.utc)
        minutes_left = int(time_left.total_seconds() // 60)
        seconds_left = int(time_left.total_seconds() % 60)
        
        if minutes_left > 0:
            time_str = f"{minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫"
        else:
            time_str = f"{seconds_left} —Å–µ–∫"
        
        limit_message = (
            f"‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ {action_name}!\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {time_str}\n\n"
            f"üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(event, Message):
            try:
                await event.answer(limit_message)
            except:
                pass
        elif isinstance(event, CallbackQuery):
            try:
                await event.answer(limit_message, show_alert=True)
            except:
                pass


class AntiFloodMiddleware(BaseMiddleware):
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, flood_limit: int = 5, flood_window: int = 10):
        self.flood_limit = flood_limit
        self.flood_window = flood_window
        self.logger = get_logger(self.__class__.__name__)
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥"""
        
        if not isinstance(event, Message):
            return await handler(event, data)
        
        user = data.get("user")
        if not user:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª—É–¥
        cache_key = f"flood:{user.telegram_id}"
        flood_data = await user_cache.get(cache_key, "antiflood")
        
        now = time.time()
        
        if not flood_data:
            flood_data = {"messages": [], "last_flood_time": 0}
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        flood_data["messages"] = [
            msg_time for msg_time in flood_data["messages"]
            if now - msg_time < self.flood_window
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        flood_data["messages"].append(now)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        if len(flood_data["messages"]) > self.flood_limit:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if now - flood_data.get("last_flood_time", 0) > 30:  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 30 —Å–µ–∫
                flood_data["last_flood_time"] = now
                await user_cache.set(cache_key, flood_data, ttl=300, cache_type="antiflood")
                
                try:
                    await event.answer(
                        "üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥!\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ."
                    )
                except:
                    pass
                
                # –õ–æ–≥–∏—Ä—É–µ–º
                await security_logger.log_suspicious_activity(
                    user_id=user.telegram_id,
                    activity_type="flood",
                    details=f"{len(flood_data['messages'])} messages in {self.flood_window}s"
                )
            
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await user_cache.set(cache_key, flood_data, ttl=300, cache_type="antiflood")
        
        return await handler(event, data)