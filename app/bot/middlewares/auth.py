"""
Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
from typing import Any, Awaitable, Callable, Dict, Optional
from datetime import datetime, timezone

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, User as TgUser, Update, Message, CallbackQuery

from app.core.logging import get_logger, bot_logger
from app.services.user_service import user_service
from app.models.user import User


class AuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.logger = get_logger(self.__class__.__name__)
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ middleware"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        tg_user = self._extract_user(event)
        if not tg_user:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±–æ—Ç –ª–∏ —ç—Ç–æ
        if tg_user.is_bot:
            self.logger.warning(f"Bot user attempted to use service: {tg_user.id}")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            user = await user_service.get_or_create_user(
                telegram_id=tg_user.id,
                username=tg_user.username,
                first_name=tg_user.first_name,
                last_name=tg_user.last_name,
                language_code=tg_user.language_code
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if not user.is_active:
                await self._handle_banned_user(event, user)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await user_service.update_last_seen(tg_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limits = await user_service.check_daily_limits(tg_user.id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            data["user"] = user
            data["tg_user"] = tg_user
            data["user_limits"] = limits
            data["is_premium"] = await user_service.is_premium_user(tg_user.id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await bot_logger.log_update(
                update_type=self._get_update_type(event),
                user_id=tg_user.id,
                chat_id=getattr(event, 'chat', {}).get('id') if hasattr(event, 'chat') else None,
                command=self._extract_command(event)
            )
            
        except Exception as e:
            self.logger.error(f"Auth middleware error for user {tg_user.id}: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        return await handler(event, data)
    
    def _extract_user(self, event: TelegramObject) -> Optional[TgUser]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if hasattr(event, 'from_user'):
            return event.from_user
        elif hasattr(event, 'message') and hasattr(event.message, 'from_user'):
            return event.message.from_user
        elif isinstance(event, Update):
            if event.message and event.message.from_user:
                return event.message.from_user
            elif event.callback_query and event.callback_query.from_user:
                return event.callback_query.from_user
            elif event.inline_query and event.inline_query.from_user:
                return event.inline_query.from_user
        return None
    
    def _get_update_type(self, event: TelegramObject) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if isinstance(event, Message):
            return "message"
        elif isinstance(event, CallbackQuery):
            return "callback_query"
        elif hasattr(event, 'inline_query'):
            return "inline_query"
        elif isinstance(event, Update):
            if event.message:
                return "message"
            elif event.callback_query:
                return "callback_query"
            elif event.inline_query:
                return "inline_query"
            elif event.chosen_inline_result:
                return "chosen_inline_result"
        return "unknown"
    
    def _extract_command(self, event: TelegramObject) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if isinstance(event, Message) and event.text:
            if event.text.startswith('/'):
                return event.text.split()[0]
        elif isinstance(event, CallbackQuery) and event.data:
            return event.data.split(':')[0] if ':' in event.data else event.data
        return None
    
    async def _handle_banned_user(self, event: TelegramObject, user: User) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        ban_message = (
            f"üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {user.ban_reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {user.banned_at.strftime('%d.%m.%Y %H:%M') if user.banned_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            f"–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
        )
        
        if isinstance(event, Message):
            try:
                await event.answer(ban_message)
            except:
                pass
        elif isinstance(event, CallbackQuery):
            try:
                await event.answer(ban_message, show_alert=True)
            except:
                pass


class UserDataMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        user = data.get("user")
        if not user:
            return await handler(event, data)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription = await user_service.get_user_subscription(user.telegram_id)
            data["subscription"] = subscription
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ)
            # stats = await user_service.get_user_stats(user.telegram_id)
            # data["user_stats"] = stats
            
        except Exception as e:
            logger = get_logger(self.__class__.__name__)
            logger.error(f"UserData middleware error: {e}")
        
        return await handler(event, data)