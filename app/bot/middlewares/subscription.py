"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ Premium —Ñ—É–Ω–∫—Ü–∏–π
"""
from typing import Any, Awaitable, Callable, Dict, Set
from datetime import datetime, timezone

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from aiogram.filters import Command

from app.core.logging import get_logger
from app.services.user_service import user_service


class SubscriptionMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    def __init__(self):
        self.logger = get_logger(self.__class__.__name__)
        
        # –ö–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫—É
        self.premium_commands: Set[str] = {
            "/premium_search",
            "/high_quality", 
            "/unlimited_downloads",
            "/export_playlist",
            "/advanced_stats"
        }
        
        # Callback –¥–∞–Ω–Ω—ã–µ, —Ç—Ä–µ–±—É—é—â–∏–µ Premium
        self.premium_callbacks: Set[str] = {
            "download_320kbps",
            "export_playlist",
            "advanced_search",
            "batch_download",
            "smart_recommendations"
        }
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Premium —Ñ—É–Ω–∫—Ü–∏—è–º"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        requires_premium = self._requires_premium(event)
        
        if not requires_premium:
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = data.get("user")
        is_premium = data.get("is_premium", False)
        
        if not user:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å
        if not is_premium:
            await self._handle_premium_required(event, user.telegram_id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = data.get("subscription")
        if subscription and subscription.expires_at <= datetime.now(timezone.utc):
            await self._handle_subscription_expired(event, user.telegram_id)
            return
        
        return await handler(event, data)
    
    def _requires_premium(self, event: TelegramObject) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫—É"""
        
        if isinstance(event, Message):
            if event.text:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
                command = event.text.split()[0] if event.text.startswith('/') else None
                if command in self.premium_commands:
                    return True
        
        elif isinstance(event, CallbackQuery):
            if event.data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–∞–Ω–Ω—ã–µ
                callback_action = event.data.split(':')[0] if ':' in event.data else event.data
                if callback_action in self.premium_callbacks:
                    return True
        
        return False
    
    async def _handle_premium_required(self, event: TelegramObject, user_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Premium —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"""
        
        premium_message = (
            "üíé **Premium —Ñ—É–Ω–∫—Ü–∏—è**\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n"
            "**Premium –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (320kbps)\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤\n\n"
            "üí≥ **–¶–µ–Ω—ã:**\n"
            "‚Ä¢ 1 –º–µ—Å—è—Ü - ‚≠ê 150 Stars\n"
            "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - ‚≠ê 400 Stars (-12%)\n"
            "‚Ä¢ 1 –≥–æ–¥ - ‚≠ê 1400 Stars (-23%)"
        )
        
        from app.bot.keyboards.inline import get_premium_keyboard
        
        try:
            if isinstance(event, Message):
                await event.answer(
                    premium_message,
                    reply_markup=get_premium_keyboard(),
                    parse_mode="Markdown"
                )
            elif isinstance(event, CallbackQuery):
                await event.message.edit_text(
                    premium_message,
                    reply_markup=get_premium_keyboard(),
                    parse_mode="Markdown"
                )
        except Exception as e:
            self.logger.error(f"Failed to send premium required message: {e}")
    
    async def _handle_subscription_expired(self, event: TelegramObject, user_id: int) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        
        expired_message = (
            "‚è∞ **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**\n\n"
            "–í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.\n"
            "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Premium —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n\n"
            "üí≥ **–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:**"
        )
        
        from app.bot.keyboards.inline import get_renew_subscription_keyboard
        
        try:
            if isinstance(event, Message):
                await event.answer(
                    expired_message,
                    reply_markup=get_renew_subscription_keyboard(),
                    parse_mode="Markdown"
                )
            elif isinstance(event, CallbackQuery):
                await event.message.edit_text(
                    expired_message,
                    reply_markup=get_renew_subscription_keyboard(),
                    parse_mode="Markdown"
                )
        except Exception as e:
            self.logger.error(f"Failed to send subscription expired message: {e}")


class DownloadLimitsMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.logger = get_logger(self.__class__.__name__)
        
        # –î–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        self.download_actions: Set[str] = {
            "download",
            "get_track",
            "download_track"
        }
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        is_download = self._is_download_action(event)
        
        if not is_download:
            return await handler(event, data)
        
        user = data.get("user")
        user_limits = data.get("user_limits")
        
        if not user or not user_limits:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not user_limits.get("can_download", False):
            await self._handle_download_limit_exceeded(event, user_limits)
            return
        
        return await handler(event, data)
    
    def _is_download_action(self, event: TelegramObject) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º"""
        
        if isinstance(event, CallbackQuery) and event.data:
            action = event.data.split(':')[0] if ':' in event.data else event.data
            return action in self.download_actions
        
        return False
    
    async def _handle_download_limit_exceeded(self, event: TelegramObject, user_limits: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"""
        
        tracks_used = user_limits.get("tracks_used", 0)
        tracks_limit = user_limits.get("tracks_limit", 0)
        is_premium = user_limits.get("is_premium", False)
        
        if is_premium:
            limit_message = (
                "‚ö†Ô∏è **–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n"
                f"–í—ã —Å–∫–∞—á–∞–ª–∏ {tracks_used} –∏–∑ {tracks_limit} —Ç—Ä–µ–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è.\n"
                "–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 UTC.\n\n"
                "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç—Ä–µ–∫–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        else:
            limit_message = (
                f"üìä **–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {tracks_used}/{tracks_limit}**\n\n"
                "–í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
                "–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 UTC.\n\n"
                "üíé **Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç:**\n"
                "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 320kbps\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫\n\n"
                "–•–æ—Ç–∏—Ç–µ Premium?"
            )
        
        try:
            if isinstance(event, CallbackQuery):
                keyboard = None
                if not is_premium:
                    from app.bot.keyboards.inline import get_premium_offer_keyboard
                    keyboard = get_premium_offer_keyboard()
                
                await event.answer(limit_message, show_alert=True)
                
                if keyboard:
                    try:
                        await event.message.reply(
                            "üíé –ü–æ–ª—É—á–∏—Ç—å Premium –ø–æ–¥–ø–∏—Å–∫—É:",
                            reply_markup=keyboard
                        )
                    except:
                        pass
                        
        except Exception as e:
            self.logger.error(f"Failed to send download limit message: {e}")