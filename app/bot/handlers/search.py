<<<<<<< HEAD
# app/bot/handlers/search.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
"""
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, List

from app.bot.keyboards.inline import (
    get_search_results_keyboard,
    get_track_actions_keyboard,
    get_search_filters_keyboard
)
from app.bot.utils.messages import Messages
from app.bot.utils.formatters import format_track_info, format_search_results
from app.services import (
    get_search_service, get_user_service, 
    get_analytics_service, get_music_aggregator
)
from app.services.search_service import SearchRequest, SearchStrategy
from app.models.track import TrackSource
from app.core.logging import get_logger, bot_logger
from app.core.exceptions import (
    RateLimitExceededError, DailyLimitExceededError,
    TrackNotFoundError, DownloadError
)

router = Router()
logger = get_logger(__name__)


class SearchStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
    waiting_query = State()
    showing_results = State()
    downloading = State()


@router.message(F.text.startswith("üîç"))
async def handle_search_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞"""
    await message.answer(
        "üéµ <b>–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:\n"
        "‚Ä¢ <code>Imagine Dragons - Believer</code>\n"
        "‚Ä¢ <code>–¢–µ–π–ª–æ—Ä –°–≤–∏—Ñ—Ç</code>\n"
        "‚Ä¢ <code>–ª—É—á—à–∏–µ —Ö–∏—Ç—ã 2024</code>",
        parse_mode="HTML"
    )
    await state.set_state(SearchStates.waiting_query)


@router.callback_query(F.data.startswith("search:"))
async def callback_search(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑ callback"""
    try:
        query = callback.data.split(":", 1)[1]
        await perform_search(callback.message, query, callback.from_user.id, state, is_callback=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in search callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.", show_alert=True)


@router.message(SearchStates.waiting_query)
async def handle_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        query = message.text.strip()
        
        if len(query) < 2:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        if len(query) > 100:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        await perform_search(message, query, message.from_user.id, state)
        
    except Exception as e:
        logger.error(f"Error handling search query: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")


async def perform_search(
    message: Message, 
    query: str, 
    user_id: int, 
    state: FSMContext,
    is_callback: bool = False
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏"""
    try:
        user_service = get_user_service()
        search_service = get_search_service()
        analytics_service = get_analytics_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_premium = await user_service.is_premium_user(user_id)
        limits_info = await user_service.check_daily_limits(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤
        from app.core.security import user_rate_limiter
        search_allowed = await user_rate_limiter.check_search_limit(user_id, is_premium)
        
        if not search_allowed:
            await message.answer(
                "‚è≥ <b>–õ–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                f"{'Premium' if is_premium else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'} –∞–∫–∫–∞—É–Ω—Ç: "
                f"{'100' if is_premium else '20'} –ø–æ–∏—Å–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É.",
                parse_mode="HTML"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        if is_callback:
            search_msg = await message.edit_text(
                f"üîç <b>–ü–æ–∏—Å–∫:</b> <i>{query}</i>\n\n"
                "‚è≥ –ò—â–µ–º –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö...",
                parse_mode="HTML"
            )
        else:
            search_msg = await message.answer(
                f"üîç <b>–ü–æ–∏—Å–∫:</b> <i>{query}</i>\n\n"
                "‚è≥ –ò—â–µ–º –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö...",
                parse_mode="HTML"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
        search_request = SearchRequest(
            query=query,
            user_id=user_id,
            limit=20 if is_premium else 10,
            strategy=SearchStrategy.COMPREHENSIVE,
            use_cache=True,
            save_to_history=True
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_response = await search_service.search(search_request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await bot_logger.log_search(
            user_id=user_id,
            query=query,
            results_count=search_response.total_found,
            duration=search_response.search_time,
            source=",".join(search_response.sources_used)
        )
        
        # –¢—Ä–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await analytics_service.track_search_event(
            user_id=user_id,
            query=query,
            results_count=search_response.total_found,
            search_time=search_response.search_time,
            sources_used=search_response.sources_used
        )
        
        if not search_response.results:
            # –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            no_results_text = Messages.get_no_search_results_message(
                query=query,
                suggestions=search_response.suggestions
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
            keyboard = None
            if search_response.suggestions:
                keyboard = get_search_suggestions_keyboard(search_response.suggestions)
            
            await search_msg.edit_text(
                text=no_results_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(
            query=query,
            results=search_response.results[:5],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            total_found=search_response.total_found,
            search_time=search_response.search_time,
            cached=search_response.cached
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = get_search_results_keyboard(
            results=search_response.results[:10],
            page=0,
            total_pages=(len(search_response.results) - 1) // 10 + 1,
            query=query
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await search_msg.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data({
            "search_results": [result.dict() for result in search_response.results],
            "current_query": query,
            "current_page": 0
        })
        
        await state.set_state(SearchStates.showing_results)
        
    except RateLimitExceededError as e:
        await message.answer(
            "‚è≥ <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in perform_search: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("track:"))
async def callback_track_action(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        action_data = callback.data.split(":", 2)
        if len(action_data) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        action = action_data[1]  # download, info, add_playlist, etc.
        track_index = int(action_data[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        search_results = data.get("search_results", [])
        
        if track_index >= len(search_results):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        track_data = search_results[track_index]
        
        if action == "download":
            await handle_track_download(callback, track_data, state)
        elif action == "info":
            await handle_track_info(callback, track_data)
        elif action == "add_playlist":
            await handle_add_to_playlist(callback, track_data, state)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            
    except Exception as e:
        logger.error(f"Error in track action callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")


async def handle_track_download(callback: CallbackQuery, track_data: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    try:
        user_service = get_user_service()
        music_aggregator = get_music_aggregator()
        analytics_service = get_analytics_service()
        
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        is_premium = await user_service.is_premium_user(user_id)
        limits_info = await user_service.check_daily_limits(user_id)
        
        if not limits_info["can_download"]:
            # –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            limit_text = Messages.get_download_limit_message(
                limits=limits_info,
                is_premium=is_premium
            )
            
            await callback.answer(limit_text, show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        download_msg = await callback.message.edit_text(
            f"üì• <b>–°–∫–∞—á–∏–≤–∞–µ–º:</b> {track_data['artist']} - {track_data['title']}\n\n"
            "‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...",
            parse_mode="HTML"
        )
        
        await state.set_state(SearchStates.downloading)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        track_source = TrackSource(track_data["source"])
        
        async with music_aggregator:
            download_result = await music_aggregator.get_download_url(
                track_id=track_data["external_id"],
                source=track_source
            )
        
        if not download_result:
            await download_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Ç—Ä–µ–∫–∞:\n"
                f"<b>{track_data['artist']} - {track_data['title']}</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await download_msg.edit_text(
            f"üì• <b>–°–∫–∞—á–∏–≤–∞–µ–º:</b> {track_data['artist']} - {track_data['title']}\n\n"
            "‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª...",
            parse_mode="HTML"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ aiohttp
        import aiohttp
        import io
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                download_result.url,
                headers=download_result.headers or {}
            ) as response:
                
                if response.status != 200:
                    raise DownloadError(f"HTTP {response.status}")
                
                audio_data = await response.read()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞
        filename = f"{track_data['artist']} - {track_data['title']}.mp3"
        filename = "".join(c for c in filename if c.isalnum() or c in (' ', '-', '_', '.'))[:100]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = BufferedInputFile(audio_data, filename=filename)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        caption = format_track_info(track_data, include_download_info=True)
        
        await callback.message.answer_audio(
            audio=audio_file,
            caption=caption,
            parse_mode="HTML",
            reply_markup=get_track_actions_keyboard(
                track_data,
                include_download=False  # –£–∂–µ —Å–∫–∞—á–∞–Ω
            )
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await download_msg.delete()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        await bot_logger.log_download(
            user_id=user_id,
            track_id=track_data["external_id"],
            track_title=f"{track_data['artist']} - {track_data['title']}",
            source=track_data["source"],
            duration=0,  # –ë—É–¥–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
            file_size=len(audio_data)
        )
        
        # –¢—Ä–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await analytics_service.track_download_event(
            user_id=user_id,
            track_id=track_data["external_id"],
            source=track_data["source"],
            success=True,
            file_size=len(audio_data)
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        await state.set_state(SearchStates.showing_results)
        
    except Exception as e:
        logger.error(f"Error downloading track: {e}")
        
        try:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫:\n"
                f"<b>{track_data.get('artist', 'Unknown')} - {track_data.get('title', 'Unknown')}</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
        except:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)


async def handle_track_info(callback: CallbackQuery, track_data: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ"""
    try:
        info_text = Messages.get_detailed_track_info(track_data)
        
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"track:download:{track_data.get('index', 0)}"),
                    InlineKeyboardButton(text="‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"track:add_playlist:{track_data.get('index', 0)}")
                ],
                [InlineKeyboardButton(text="üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")]
            ]
        )
        
        await callback.message.edit_text(
            text=info_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing track info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ.")


async def handle_add_to_playlist(callback: CallbackQuery, track_data: dict, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
    try:
        from app.services import get_playlist_service
        
        playlist_service = get_playlist_service()
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        playlists = await playlist_service.get_user_playlists(user_id, limit=10)
        
        if not playlists:
            # –ù–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist")],
                    [InlineKeyboardButton(text="üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")]
                ]
            )
            
            await callback.message.edit_text(
                "üìã <b>–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–≥–æ —Ç—Ä–µ–∫–∏!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        from app.bot.keyboards.inline import get_playlists_keyboard
        
        keyboard = get_playlists_keyboard(
            playlists=playlists,
            action="add_track",
            track_index=track_data.get('index', 0)
        )
        
        await callback.message.edit_text(
            f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç</b>\n\n"
            f"–¢—Ä–µ–∫: <b>{track_data['artist']} - {track_data['title']}</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error adding to playlist: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç.")


@router.callback_query(F.data.startswith("page:"))
async def callback_search_pagination(callback: CallbackQuery, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        page = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        search_results = data.get("search_results", [])
        query = data.get("current_query", "")
        
        if not search_results:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        results_per_page = 10
        start_idx = page * results_per_page
        end_idx = min(start_idx + results_per_page, len(search_results))
        
        if start_idx >= len(search_results):
            await callback.answer("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        page_results = search_results[start_idx:end_idx]
        total_pages = (len(search_results) - 1) // results_per_page + 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        results_text = format_search_results(
            query=query,
            results=page_results,
            total_found=len(search_results),
            search_time=0,  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            cached=True,
            page=page + 1,
            total_pages=total_pages
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_search_results_keyboard(
            results=page_results,
            page=page,
            total_pages=total_pages,
            query=query
        )
        
        await callback.message.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_page=page)
        
        await callback.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}")
        
    except Exception as e:
        logger.error(f"Error in search pagination: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")


@router.callback_query(F.data == "back_to_results")
async def callback_back_to_results(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        search_results = data.get("search_results", [])
        query = data.get("current_query", "")
        current_page = data.get("current_page", 0)
        
        if not search_results:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_per_page = 10
        start_idx = current_page * results_per_page
        end_idx = min(start_idx + results_per_page, len(search_results))
        page_results = search_results[start_idx:end_idx]
        total_pages = (len(search_results) - 1) // results_per_page + 1
        
        results_text = format_search_results(
            query=query,
            results=page_results,
            total_found=len(search_results),
            search_time=0,
            cached=True,
            page=current_page + 1,
            total_pages=total_pages
        )
        
        keyboard = get_search_results_keyboard(
            results=page_results,
            page=current_page,
            total_pages=total_pages,
            query=query
        )
        
        await callback.message.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(SearchStates.showing_results)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error returning to results: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.")


@router.callback_query(F.data.startswith("filter:"))
async def callback_search_filter(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        filter_type = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        query = data.get("current_query", "")
        
        if not query:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        sources = None
        if filter_type == "vk":
            sources = [TrackSource.VK_AUDIO]
        elif filter_type == "youtube":
            sources = [TrackSource.YOUTUBE]
        elif filter_type == "spotify":
            sources = [TrackSource.SPOTIFY]
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        search_service = get_search_service()
        
        search_request = SearchRequest(
            query=query,
            user_id=callback.from_user.id,
            sources=sources,
            limit=20,
            strategy=SearchStrategy.COMPREHENSIVE,
            use_cache=True,
            save_to_history=False  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä...")
        
        await callback.message.edit_text(
            f"üîç <b>–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:</b> <i>{query}</i>\n\n"
            "‚è≥ –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_response = await search_service.search(search_request)
        
        if not search_response.results:
            await callback.message.edit_text(
                f"‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É <i>{query}</i> —Å –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(
            query=query,
            results=search_response.results[:5],
            total_found=search_response.total_found,
            search_time=search_response.search_time,
            cached=search_response.cached,
            filter_applied=filter_type.upper()
        )
        
        keyboard = get_search_results_keyboard(
            results=search_response.results[:10],
            page=0,
            total_pages=(len(search_response.results) - 1) // 10 + 1,
            query=query,
            filter_type=filter_type
        )
        
        await callback.message.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            "search_results": [result.dict() for result in search_response.results],
            "current_filter": filter_type
        })
        
    except Exception as e:
        logger.error(f"Error in search filter: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")


def get_search_suggestions_keyboard(suggestions: List[str]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ–∏—Å–∫–∞"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = []
    
    for suggestion in suggestions[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        keyboard.append([
            InlineKeyboardButton(
                text=f"üîç {suggestion}",
                callback_data=f"search:{suggestion}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@router.message(F.text, ~F.text.startswith('/'))
async def handle_text_as_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫
    if current_state is None:
        query = message.text.strip()
        
        if len(query) >= 2:
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"üîç –ù–∞–π—Ç–∏: {query[:30]}{'...' if len(query) > 30 else ''}",
                        callback_data=f"search:{query}"
                    )],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
            
            await message.answer(
                f"üéµ <b>–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É?</b>\n\n"
                f"–ó–∞–ø—Ä–æ—Å: <i>{query}</i>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
=======
# app/bot/handlers/search.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
"""
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, List

from app.bot.keyboards.inline import (
    get_search_results_keyboard,
    get_track_actions_keyboard,
    get_search_filters_keyboard
)
from app.bot.utils.messages import Messages
from app.bot.utils.formatters import format_track_info, format_search_results
from app.services import (
    get_search_service, get_user_service, 
    get_analytics_service, get_music_aggregator
)
from app.services.search_service import SearchRequest, SearchStrategy
from app.models.track import TrackSource
from app.core.logging import get_logger, bot_logger
from app.core.exceptions import (
    RateLimitExceededError, DailyLimitExceededError,
    TrackNotFoundError, DownloadError
)

router = Router()
logger = get_logger(__name__)


class SearchStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
    waiting_query = State()
    showing_results = State()
    downloading = State()


@router.message(F.text.startswith("üîç"))
async def handle_search_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞"""
    await message.answer(
        "üéµ <b>–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:\n"
        "‚Ä¢ <code>Imagine Dragons - Believer</code>\n"
        "‚Ä¢ <code>–¢–µ–π–ª–æ—Ä –°–≤–∏—Ñ—Ç</code>\n"
        "‚Ä¢ <code>–ª—É—á—à–∏–µ —Ö–∏—Ç—ã 2024</code>",
        parse_mode="HTML"
    )
    await state.set_state(SearchStates.waiting_query)


@router.callback_query(F.data.startswith("search:"))
async def callback_search(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑ callback"""
    try:
        query = callback.data.split(":", 1)[1]
        await perform_search(callback.message, query, callback.from_user.id, state, is_callback=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in search callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.", show_alert=True)


@router.message(SearchStates.waiting_query)
async def handle_search_query(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        query = message.text.strip()
        
        if len(query) < 2:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞."
            )
            return
        
        if len(query) > 100:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        await perform_search(message, query, message.from_user.id, state)
        
    except Exception as e:
        logger.error(f"Error handling search query: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")


async def perform_search(
    message: Message, 
    query: str, 
    user_id: int, 
    state: FSMContext,
    is_callback: bool = False
):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏"""
    try:
        user_service = get_user_service()
        search_service = get_search_service()
        analytics_service = get_analytics_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_premium = await user_service.is_premium_user(user_id)
        limits_info = await user_service.check_daily_limits(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤
        from app.core.security import user_rate_limiter
        search_allowed = await user_rate_limiter.check_search_limit(user_id, is_premium)
        
        if not search_allowed:
            await message.answer(
                "‚è≥ <b>–õ–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                f"{'Premium' if is_premium else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'} –∞–∫–∫–∞—É–Ω—Ç: "
                f"{'100' if is_premium else '20'} –ø–æ–∏—Å–∫–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É.",
                parse_mode="HTML"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        if is_callback:
            search_msg = await message.edit_text(
                f"üîç <b>–ü–æ–∏—Å–∫:</b> <i>{query}</i>\n\n"
                "‚è≥ –ò—â–µ–º –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö...",
                parse_mode="HTML"
            )
        else:
            search_msg = await message.answer(
                f"üîç <b>–ü–æ–∏—Å–∫:</b> <i>{query}</i>\n\n"
                "‚è≥ –ò—â–µ–º –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö...",
                parse_mode="HTML"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
        search_request = SearchRequest(
            query=query,
            user_id=user_id,
            limit=20 if is_premium else 10,
            strategy=SearchStrategy.COMPREHENSIVE,
            use_cache=True,
            save_to_history=True
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_response = await search_service.search(search_request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await bot_logger.log_search(
            user_id=user_id,
            query=query,
            results_count=search_response.total_found,
            duration=search_response.search_time,
            source=",".join(search_response.sources_used)
        )
        
        # –¢—Ä–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await analytics_service.track_search_event(
            user_id=user_id,
            query=query,
            results_count=search_response.total_found,
            search_time=search_response.search_time,
            sources_used=search_response.sources_used
        )
        
        if not search_response.results:
            # –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            no_results_text = Messages.get_no_search_results_message(
                query=query,
                suggestions=search_response.suggestions
            )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
            keyboard = None
            if search_response.suggestions:
                keyboard = get_search_suggestions_keyboard(search_response.suggestions)
            
            await search_msg.edit_text(
                text=no_results_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(
            query=query,
            results=search_response.results[:5],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            total_found=search_response.total_found,
            search_time=search_response.search_time,
            cached=search_response.cached
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = get_search_results_keyboard(
            results=search_response.results[:10],
            page=0,
            total_pages=(len(search_response.results) - 1) // 10 + 1,
            query=query
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        await search_msg.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data({
            "search_results": [result.dict() for result in search_response.results],
            "current_query": query,
            "current_page": 0
        })
        
        await state.set_state(SearchStates.showing_results)
        
    except RateLimitExceededError as e:
        await message.answer(
            "‚è≥ <b>–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in perform_search: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("track:"))
async def callback_track_action(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        action_data = callback.data.split(":", 2)
        if len(action_data) < 3:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        action = action_data[1]  # download, info, add_playlist, etc.
        track_index = int(action_data[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        search_results = data.get("search_results", [])
        
        if track_index >= len(search_results):
            await callback.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        track_data = search_results[track_index]
        
        if action == "download":
            await handle_track_download(callback, track_data, state)
        elif action == "info":
            await handle_track_info(callback, track_data)
        elif action == "add_playlist":
            await handle_add_to_playlist(callback, track_data, state)
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            
    except Exception as e:
        logger.error(f"Error in track action callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")


async def handle_track_download(callback: CallbackQuery, track_data: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    try:
        user_service = get_user_service()
        music_aggregator = get_music_aggregator()
        analytics_service = get_analytics_service()
        
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        is_premium = await user_service.is_premium_user(user_id)
        limits_info = await user_service.check_daily_limits(user_id)
        
        if not limits_info["can_download"]:
            # –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            limit_text = Messages.get_download_limit_message(
                limits=limits_info,
                is_premium=is_premium
            )
            
            await callback.answer(limit_text, show_alert=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        download_msg = await callback.message.edit_text(
            f"üì• <b>–°–∫–∞—á–∏–≤–∞–µ–º:</b> {track_data['artist']} - {track_data['title']}\n\n"
            "‚è≥ –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...",
            parse_mode="HTML"
        )
        
        await state.set_state(SearchStates.downloading)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        track_source = TrackSource(track_data["source"])
        
        async with music_aggregator:
            download_result = await music_aggregator.get_download_url(
                track_id=track_data["external_id"],
                source=track_source
            )
        
        if not download_result:
            await download_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Ç—Ä–µ–∫–∞:\n"
                f"<b>{track_data['artist']} - {track_data['title']}</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await download_msg.edit_text(
            f"üì• <b>–°–∫–∞—á–∏–≤–∞–µ–º:</b> {track_data['artist']} - {track_data['title']}\n\n"
            "‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª...",
            parse_mode="HTML"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ aiohttp
        import aiohttp
        import io
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                download_result.url,
                headers=download_result.headers or {}
            ) as response:
                
                if response.status != 200:
                    raise DownloadError(f"HTTP {response.status}")
                
                audio_data = await response.read()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞
        filename = f"{track_data['artist']} - {track_data['title']}.mp3"
        filename = "".join(c for c in filename if c.isalnum() or c in (' ', '-', '_', '.'))[:100]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = BufferedInputFile(audio_data, filename=filename)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        caption = format_track_info(track_data, include_download_info=True)
        
        await callback.message.answer_audio(
            audio=audio_file,
            caption=caption,
            parse_mode="HTML",
            reply_markup=get_track_actions_keyboard(
                track_data,
                include_download=False  # –£–∂–µ —Å–∫–∞—á–∞–Ω
            )
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await download_msg.delete()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        await bot_logger.log_download(
            user_id=user_id,
            track_id=track_data["external_id"],
            track_title=f"{track_data['artist']} - {track_data['title']}",
            source=track_data["source"],
            duration=0,  # –ë—É–¥–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
            file_size=len(audio_data)
        )
        
        # –¢—Ä–µ–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await analytics_service.track_download_event(
            user_id=user_id,
            track_id=track_data["external_id"],
            source=track_data["source"],
            success=True,
            file_size=len(audio_data)
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        await state.set_state(SearchStates.showing_results)
        
    except Exception as e:
        logger.error(f"Error downloading track: {e}")
        
        try:
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫:\n"
                f"<b>{track_data.get('artist', 'Unknown')} - {track_data.get('title', 'Unknown')}</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
        except:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞.", show_alert=True)


async def handle_track_info(callback: CallbackQuery, track_data: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ"""
    try:
        info_text = Messages.get_detailed_track_info(track_data)
        
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"track:download:{track_data.get('index', 0)}"),
                    InlineKeyboardButton(text="‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"track:add_playlist:{track_data.get('index', 0)}")
                ],
                [InlineKeyboardButton(text="üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")]
            ]
        )
        
        await callback.message.edit_text(
            text=info_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing track info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ.")


async def handle_add_to_playlist(callback: CallbackQuery, track_data: dict, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
    try:
        from app.services import get_playlist_service
        
        playlist_service = get_playlist_service()
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        playlists = await playlist_service.get_user_playlists(user_id, limit=10)
        
        if not playlists:
            # –ù–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist")],
                    [InlineKeyboardButton(text="üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")]
                ]
            )
            
            await callback.message.edit_text(
                "üìã <b>–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–≥–æ —Ç—Ä–µ–∫–∏!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        from app.bot.keyboards.inline import get_playlists_keyboard
        
        keyboard = get_playlists_keyboard(
            playlists=playlists,
            action="add_track",
            track_index=track_data.get('index', 0)
        )
        
        await callback.message.edit_text(
            f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç</b>\n\n"
            f"–¢—Ä–µ–∫: <b>{track_data['artist']} - {track_data['title']}</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error adding to playlist: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç.")


@router.callback_query(F.data.startswith("page:"))
async def callback_search_pagination(callback: CallbackQuery, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        page = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        search_results = data.get("search_results", [])
        query = data.get("current_query", "")
        
        if not search_results:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        results_per_page = 10
        start_idx = page * results_per_page
        end_idx = min(start_idx + results_per_page, len(search_results))
        
        if start_idx >= len(search_results):
            await callback.answer("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        page_results = search_results[start_idx:end_idx]
        total_pages = (len(search_results) - 1) // results_per_page + 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        results_text = format_search_results(
            query=query,
            results=page_results,
            total_found=len(search_results),
            search_time=0,  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            cached=True,
            page=page + 1,
            total_pages=total_pages
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_search_results_keyboard(
            results=page_results,
            page=page,
            total_pages=total_pages,
            query=query
        )
        
        await callback.message.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_page=page)
        
        await callback.answer(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}")
        
    except Exception as e:
        logger.error(f"Error in search pagination: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")


@router.callback_query(F.data == "back_to_results")
async def callback_back_to_results(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        search_results = data.get("search_results", [])
        query = data.get("current_query", "")
        current_page = data.get("current_page", 0)
        
        if not search_results:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_per_page = 10
        start_idx = current_page * results_per_page
        end_idx = min(start_idx + results_per_page, len(search_results))
        page_results = search_results[start_idx:end_idx]
        total_pages = (len(search_results) - 1) // results_per_page + 1
        
        results_text = format_search_results(
            query=query,
            results=page_results,
            total_found=len(search_results),
            search_time=0,
            cached=True,
            page=current_page + 1,
            total_pages=total_pages
        )
        
        keyboard = get_search_results_keyboard(
            results=page_results,
            page=current_page,
            total_pages=total_pages,
            query=query
        )
        
        await callback.message.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(SearchStates.showing_results)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error returning to results: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.")


@router.callback_query(F.data.startswith("filter:"))
async def callback_search_filter(callback: CallbackQuery, state: FSMContext):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    try:
        filter_type = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        query = data.get("current_query", "")
        
        if not query:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        sources = None
        if filter_type == "vk":
            sources = [TrackSource.VK_AUDIO]
        elif filter_type == "youtube":
            sources = [TrackSource.YOUTUBE]
        elif filter_type == "spotify":
            sources = [TrackSource.SPOTIFY]
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        search_service = get_search_service()
        
        search_request = SearchRequest(
            query=query,
            user_id=callback.from_user.id,
            sources=sources,
            limit=20,
            strategy=SearchStrategy.COMPREHENSIVE,
            use_cache=True,
            save_to_history=False  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä...")
        
        await callback.message.edit_text(
            f"üîç <b>–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:</b> <i>{query}</i>\n\n"
            "‚è≥ –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_response = await search_service.search(search_request)
        
        if not search_response.results:
            await callback.message.edit_text(
                f"‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É <i>{query}</i> —Å –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_text = format_search_results(
            query=query,
            results=search_response.results[:5],
            total_found=search_response.total_found,
            search_time=search_response.search_time,
            cached=search_response.cached,
            filter_applied=filter_type.upper()
        )
        
        keyboard = get_search_results_keyboard(
            results=search_response.results[:10],
            page=0,
            total_pages=(len(search_response.results) - 1) // 10 + 1,
            query=query,
            filter_type=filter_type
        )
        
        await callback.message.edit_text(
            text=results_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({
            "search_results": [result.dict() for result in search_response.results],
            "current_filter": filter_type
        })
        
    except Exception as e:
        logger.error(f"Error in search filter: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞.")


def get_search_suggestions_keyboard(suggestions: List[str]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ–∏—Å–∫–∞"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = []
    
    for suggestion in suggestions[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        keyboard.append([
            InlineKeyboardButton(
                text=f"üîç {suggestion}",
                callback_data=f"search:{suggestion}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@router.message(F.text, ~F.text.startswith('/'))
async def handle_text_as_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫
    if current_state is None:
        query = message.text.strip()
        
        if len(query) >= 2:
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"üîç –ù–∞–π—Ç–∏: {query[:30]}{'...' if len(query) > 30 else ''}",
                        callback_data=f"search:{query}"
                    )],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
            
            await message.answer(
                f"üéµ <b>–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É?</b>\n\n"
                f"–ó–∞–ø—Ä–æ—Å: <i>{query}</i>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
>>>>>>> a6dfd6a (upd commit)
