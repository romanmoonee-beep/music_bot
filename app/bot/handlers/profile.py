# app/bot/handlers/profile.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from typing import Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.core.logging import get_logger, bot_logger
from app.services.user_service import user_service
from app.services.analytics_service import analytics_service
from app.bot.keyboards.inline import (
    get_profile_keyboard, get_settings_keyboard, 
    get_quality_settings_keyboard, get_back_to_menu_keyboard,
    get_confirmation_keyboard
)
from app.bot.utils.formatters import (
    format_user_stats, format_subscription_info, 
    format_listening_history, format_achievements
)

router = Router()
logger = get_logger(__name__)


class ProfileStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    viewing_profile = State()
    editing_settings = State()
    exporting_data = State()


@router.message(Command("profile"))
@router.callback_query(F.data == "profile")
async def show_profile(event, user, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await user_service.get_user_stats(user.telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription = await user_service.get_user_subscription(user.telegram_id)
        is_premium = await user_service.is_premium_user(user.telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await user_service.get_user_settings(user.telegram_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = await format_profile_info(
            user, user_stats, subscription, is_premium, settings
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_profile_keyboard(is_premium=is_premium)
        
        if isinstance(event, Message):
            await event.answer(
                profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await event.message.edit_text(
                profile_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await event.answer()
        
        await bot_logger.log_update(
            update_type="profile_view",
            user_id=user.telegram_id,
            is_premium=is_premium
        )
        
    except Exception as e:
        logger.error(f"Error showing profile for user {user.id}: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        if isinstance(event, Message):
            await event.answer(error_text)
        else:
            await event.answer(error_text, show_alert=True)


@router.callback_query(F.data == "my_stats")
async def show_detailed_stats(callback: CallbackQuery, user, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        detailed_stats = await analytics_service.get_user_detailed_stats(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_history = await analytics_service.get_user_activity_timeline(
            user.id, days=30
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        top_tracks = await analytics_service.get_user_top_tracks(user.id, limit=10)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = format_detailed_stats(
            detailed_stats, activity_history, top_tracks
        )
        
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                        callback_data="export_user_data"
                    ),
                    InlineKeyboardButton(
                        text="üìà –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 
                        callback_data="user_achievements"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üéµ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è", 
                        callback_data="listening_history"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é", 
                        callback_data="profile"
                    )
                ]
            ]
        )
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing detailed stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "listening_history")
async def show_listening_history(callback: CallbackQuery, user, **kwargs):
    """–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        history = await analytics_service.get_user_listening_history(
            user.id, days=7, limit=50
        )
        
        if not history:
            no_history_text = (
                "üéµ **–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
            )
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="profile")]
                ]
            )
            
            await callback.message.edit_text(
                no_history_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history_text = format_listening_history(history)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.row(
            InlineKeyboardButton(
                text="üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", 
                callback_data="history_30d"
            ),
            InlineKeyboardButton(
                text="üìà –í–µ—Å—å –ø–µ—Ä–∏–æ–¥", 
                callback_data="history_all"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üéØ –¢–æ–ø —Ç—Ä–µ–∫–æ–≤", 
                callback_data="top_tracks"
            ),
            InlineKeyboardButton(
                text="üé≠ –¢–æ–ø –∂–∞–Ω—Ä–æ–≤", 
                callback_data="top_genres"
            )
        )
        
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")
        )
        
        await callback.message.edit_text(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing listening history: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)


@router.callback_query(F.data == "user_achievements")
async def show_achievements(callback: CallbackQuery, user, **kwargs):
    """–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = await analytics_service.get_user_achievements(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        achievements_progress = await analytics_service.get_achievements_progress(user.id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_text = format_achievements(achievements, achievements_progress)
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 
                        callback_data="all_achievements"
                    )
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="my_stats")
                ]
            ]
        )
        
        await callback.message.edit_text(
            achievements_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing achievements: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery, user, **kwargs):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await user_service.get_user_settings(user.telegram_id)
        
        settings_text = (
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            f"üéµ **–ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ:** {settings.get('audio_quality', '192kbps')}\n"
            f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {'–≤–∫–ª—é—á–µ–Ω—ã' if settings.get('notifications_enabled', True) else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üåê **–Ø–∑—ã–∫:** {settings.get('language_code', 'ru').upper()}\n"
            f"üì± **–ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:** {'–¥–∞' if settings.get('auto_add_to_favorites', False) else '–Ω–µ—Ç'}\n"
            f"üîû **–ö–æ–Ω—Ç–µ–Ω—Ç 18+:** {'–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å' if settings.get('show_explicit', True) else '—Å–∫—Ä—ã–≤–∞—Ç—å'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        )
        
        keyboard = get_settings_keyboard()
        
        await callback.message.edit_text(
            settings_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "settings:quality")
async def change_quality_settings(callback: CallbackQuery, user, **kwargs):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ"""
    try:
        settings = await user_service.get_user_settings(user.telegram_id)
        current_quality = settings.get('audio_quality', '192kbps')
        
        quality_text = (
            "üéµ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:\n\n"
            "üîª **128 kbps** - —ç–∫–æ–Ω–æ–º–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞\n"
            "üî∏ **192 kbps** - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
            "üîπ **256 kbps** - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
            "üíé **320 kbps** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (Premium)\n\n"
            f"–¢–µ–∫—É—â–µ–µ: **{current_quality}**"
        )
        
        keyboard = get_quality_settings_keyboard(current_quality)
        
        await callback.message.edit_text(
            quality_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing quality settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_quality:"))
async def set_audio_quality(callback: CallbackQuery, user, **kwargs):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ"""
    try:
        quality = callback.data.split(":")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium –¥–ª—è 320kbps
        if quality == "320kbps":
            is_premium = await user_service.is_premium_user(user.telegram_id)
            if not is_premium:
                await callback.answer(
                    "üíé –ö–∞—á–µ—Å—Ç–≤–æ 320kbps –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!",
                    show_alert=True
                )
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await user_service.update_user_settings(
            user.telegram_id,
            {"audio_quality": quality}
        )
        
        success_text = (
            "‚úÖ **–ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ**\n\n"
            f"–ù–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: **{quality}**\n\n"
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –¥–ª—è –Ω–æ–≤—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π."
        )
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")]
            ]
        )
        
        await callback.message.edit_text(
            success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await bot_logger.log_update(
            update_type="settings_changed",
            user_id=user.telegram_id,
            setting="audio_quality",
            new_value=quality
        )
        
    except Exception as e:
        logger.error(f"Error setting quality: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "export_user_data")
async def export_user_data(callback: CallbackQuery, user, state: FSMContext, **kwargs):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        last_export = await user_service.get_last_data_export(user.telegram_id)
        if last_export:
            from datetime import datetime, timedelta
            if datetime.utcnow() - last_export < timedelta(days=7):
                await callback.answer(
                    "üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
                return
        
        await callback.answer("üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_msg = await callback.message.edit_text(
            "üìä **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
            "‚è≥ –°–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode="Markdown"
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        export_data = await user_service.export_user_data(user.telegram_id)
        
        if not export_data:
            await export_msg.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="Markdown"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        import json
        from datetime import datetime
        
        filename = f"my_music_data_{user.telegram_id}_{datetime.now().strftime('%Y%m%d')}.json"
        file_content = json.dumps(export_data, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_buffer = BufferedInputFile(
            file_content.encode('utf-8'),
            filename=filename
        )
        
        await callback.message.answer_document(
            document=file_buffer,
            caption=(
                "üìä **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ**\n\n"
                "–í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è:\n"
                "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤\n"
                "‚Ä¢ –ü–ª–µ–π–ª–∏—Å—Ç—ã\n"
                "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π\n"
                "‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏\n\n"
                "üîí –•—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!"
            ),
            parse_mode="Markdown"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await export_msg.delete()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        await user_service.record_data_export(user.telegram_id)
        
        await bot_logger.log_update(
            update_type="data_exported",
            user_id=user.telegram_id,
            export_size=len(file_content)
        )
        
    except Exception as e:
        logger.error(f"Error exporting user data: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "delete_account")
async def confirm_delete_account(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        warning_text = (
            "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï! –£–î–ê–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê**\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–ù–ï–û–ë–†–ê–¢–ò–ú–û**!\n\n"
            "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
            "‚Ä¢ –í—Å–µ –≤–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–æ–≤ –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ (–±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤)\n\n"
            "‚ùó –í—ã **–ù–ï –°–ú–û–ñ–ï–¢–ï** –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!\n\n"
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?"
        )
        
        keyboard = get_confirmation_keyboard("delete_account", "")
        
        await callback.message.edit_text(
            warning_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing delete confirmation: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "confirm:delete_account:")
async def delete_account_confirmed(callback: CallbackQuery, user, **kwargs):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        await callback.answer("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç...")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deletion_result = await user_service.delete_user_account(user.telegram_id)
        
        if deletion_result:
            farewell_text = (
                "‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω**\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n\n"
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º! üëã\n\n"
                "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start"
            )
            
            await callback.message.edit_text(
                farewell_text,
                reply_markup=None,
                parse_mode="Markdown"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            await bot_logger.log_update(
                update_type="account_deleted",
                user_id=user.telegram_id,
                reason="user_request"
            )
        else:
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"Error deleting account: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def format_profile_info(user, user_stats, subscription, is_premium, settings) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_name = user.first_name or user.username or f"User{user.telegram_id}"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    profile_text = (
        f"üë§ **{display_name}**\n"
        f"üÜî ID: `{user.telegram_id}`\n"
        f"üìÖ –° –Ω–∞–º–∏: {format_registration_date(user.created_at)}\n"
    )
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    if is_premium and subscription:
        if subscription.expires_at:
            days_left = (subscription.expires_at - datetime.utcnow()).days
            profile_text += (
                f"üëë **Premium** (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.)\n"
                f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if subscription.auto_renew else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            )
        else:
            profile_text += "üëë **Premium** (–±–µ—Å—Å—Ä–æ—á–Ω–æ)\n"
    else:
        profile_text += "üÜì **Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**\n"
    
    profile_text += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    profile_text += (
        "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"üîç –ü–æ–∏—Å–∫–æ–≤: {user_stats.total_searches:,}\n"
        f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {user_stats.total_downloads:,}\n"
        f"‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {user_stats.favorite_tracks_count}\n"
        f"üìã –ü–ª–µ–π–ª–∏—Å—Ç–æ–≤: {user_stats.playlists_count}\n"
    )
    
    if user_stats.listening_time_hours > 0:
        profile_text += f"üéß –ü—Ä–æ—Å–ª—É—à–∞–Ω–æ: {user_stats.listening_time_hours:.1f} —á.\n"
    
    if user_stats.most_played_genre:
        profile_text += f"üé≠ –õ—é–±–∏–º—ã–π –∂–∞–Ω—Ä: {user_stats.most_played_genre}\n"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    profile_text += (
        f"\n‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        f"üéµ –ö–∞—á–µ—Å—Ç–≤–æ: {settings.get('audio_quality', '192kbps')}\n"
        f"üåê –Ø–∑—ã–∫: {settings.get('language_code', 'ru').upper()}\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª.' if settings.get('notifications_enabled', True) else '–≤—ã–∫–ª.'}\n"
    )
    
    return profile_text


def format_registration_date(created_at) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    from datetime import datetime
    
    days_ago = (datetime.utcnow() - created_at).days
    
    if days_ago == 0:
        return "—Å–µ–≥–æ–¥–Ω—è"
    elif days_ago == 1:
        return "–≤—á–µ—Ä–∞"
    elif days_ago < 30:
        return f"{days_ago} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif days_ago < 365:
        months = days_ago // 30
        return f"{months} –º–µ—Å. –Ω–∞–∑–∞–¥"
    else:
        years = days_ago // 365
        return f"{years} –≥. –Ω–∞–∑–∞–¥"


def format_detailed_stats(detailed_stats, activity_history, top_tracks) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    text = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    
    # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    text += (
        "üéØ **–û–±—â–µ–µ:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {detailed_stats.get('total_sessions', 0)}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {detailed_stats.get('avg_session_duration', 0):.1f} –º–∏–Ω\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–æ—Ç–µ: {detailed_stats.get('total_time_hours', 0):.1f} —á\n\n"
    )
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    if 'weekly_activity' in detailed_stats:
        text += "üìÖ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**\n"
        days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        for i, day in enumerate(days):
            count = detailed_stats['weekly_activity'].get(str(i), 0)
            text += f"‚Ä¢ {day}: {count} –¥–µ–π—Å—Ç–≤–∏–π\n"
        text += "\n"
    
    # –¢–æ–ø —Ç—Ä–µ–∫–∏
    if top_tracks:
        text += "üéµ **–í–∞—à–∏ —Ç–æ–ø —Ç—Ä–µ–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü):**\n"
        for i, track in enumerate(top_tracks[:5], 1):
            text += f"{i}. {track['artist']} - {track['title']}\n"
            text += f"   ‚ñ´Ô∏è –ü—Ä–æ—Å–ª—É—à–∞–Ω–æ: {track['play_count']} —Ä–∞–∑\n"
        text += "\n"
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    if activity_history:
        text += "üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
        for day_data in activity_history[-7:]:
            date = day_data['date']
            actions = day_data['actions_count']
            text += f"‚Ä¢ {date}: {actions} –¥–µ–π—Å—Ç–≤–∏–π\n"
    
    return text


def format_listening_history(history) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è"""
    
    text = "üéµ **–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è**\n\n"
    
    if not history:
        return text + "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏."
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    from collections import defaultdict
    from datetime import datetime
    
    by_date = defaultdict(list)
    for item in history:
        date = item['timestamp'].date()
        by_date[date].append(item)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    sorted_dates = sorted(by_date.keys(), reverse=True)
    
    for date in sorted_dates[:7]:
        tracks = by_date[date]
        
        if date == datetime.now().date():
            date_str = "–°–µ–≥–æ–¥–Ω—è"
        elif (datetime.now().date() - date).days == 1:
            date_str = "–í—á–µ—Ä–∞"
        else:
            date_str = date.strftime("%d.%m")
        
        text += f"üìÖ **{date_str}** ({len(tracks)} —Ç—Ä–µ–∫–æ–≤):\n"
        
        for track in tracks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç—Ä–µ–∫–æ–≤ –¥–Ω—è
            time_str = track['timestamp'].strftime("%H:%M")
            text += f"‚Ä¢ {time_str} - {track['artist']} - {track['title']}\n"
        
        if len(tracks) > 5:
            text += f"  ... –∏ –µ—â—ë {len(tracks) - 5} —Ç—Ä–µ–∫–æ–≤\n"
        
        text += "\n"
    
    return text


def format_achievements(achievements, progress) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    
    text = "üèÜ **–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n"
    
    if not achievements:
        text += (
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!"
        )
        return text
    
    # –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    earned_count = len([a for a in achievements if a.get('earned', False)])
    total_count = len(achievements)
    
    text += f"–ü–æ–ª—É—á–µ–Ω–æ: **{earned_count}/{total_count}** üéØ\n\n"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    categories = {
        'search': 'üîç –ü–æ–∏—Å–∫',
        'download': 'üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ',  
        'playlist': 'üìã –ü–ª–µ–π–ª–∏—Å—Ç—ã',
        'social': 'üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
        'time': '‚è∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
    }
    
    for category, title in categories.items():
        category_achievements = [a for a in achievements if a.get('category') == category]
        if not category_achievements:
            continue
            
        text += f"**{title}:**\n"
        
        for achievement in category_achievements:
            if achievement.get('earned'):
                icon = "‚úÖ"
                date_earned = achievement.get('earned_at', '').strftime('%d.%m.%Y') if achievement.get('earned_at') else ''
                text += f"{icon} {achievement['name']} {date_earned}\n"
            else:
                icon = "üîí"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                current = progress.get(achievement['id'], {}).get('current', 0)
                required = achievement.get('required', 0)
                text += f"{icon} {achievement['name']} ({current}/{required})\n"
        
        text += "\n"
    
    return text


from datetime import datetime