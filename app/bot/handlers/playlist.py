"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
"""
from typing import List, Optional
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.core.logging import get_logger, bot_logger
from app.services.playlist_service import playlist_service
from app.services.user_service import user_service
from app.schemas.playlist import PlaylistCreate, PlaylistUpdate, PlaylistTrackAdd
from app.bot.keyboards.inline import (
    get_playlists_keyboard, get_playlist_actions_keyboard, 
    get_add_to_playlist_keyboard, get_confirmation_keyboard,
    get_back_to_menu_keyboard
)
from app.bot.keyboards.reply import get_cancel_keyboard
from app.bot.keyboards.builders import DynamicKeyboardBuilder

playlist_router = Router()
logger = get_logger(__name__)


class PlaylistStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏"""
    waiting_for_name = State()
    waiting_for_description = State()
    editing_name = State()
    editing_description = State()


@playlist_router.message(Command("playlists"))
@playlist_router.callback_query(F.data == "my_playlists")
async def show_my_playlists(event, user, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        playlists = await playlist_service.get_user_playlists(user.id, limit=50)
        
        if not playlists:
            no_playlists_text = (
                "üìã **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤**\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É!\n\n"
                "üí° **–°–æ–≤–µ—Ç—ã:**\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞\n"
                "‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏"
            )
            
            keyboard = get_back_to_menu_keyboard()
            
            if isinstance(event, Message):
                await event.answer(
                    no_playlists_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                await event.message.edit_text(
                    no_playlists_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
        keyboard = get_playlists_keyboard(playlists)
        
        playlists_text = (
            f"üìã **–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã ({len(playlists)})**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        
        if isinstance(event, Message):
            await event.answer(
                playlists_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await event.message.edit_text(
                playlists_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        await bot_logger.log_update(
            update_type="playlists_view",
            user_id=user.telegram_id,
            playlists_count=len(playlists)
        )
        
    except Exception as e:
        logger.error(f"Error showing playlists for user {user.id}: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        if isinstance(event, Message):
            await event.answer(error_text)
        else:
            await event.answer(error_text, show_alert=True)


@playlist_router.callback_query(F.data.startswith("playlist:"))
async def show_playlist_details(callback: CallbackQuery, user, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        playlist_id = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        playlist = await playlist_service.get_playlist_by_id(int(playlist_id), user.id)
        
        if not playlist:
            await callback.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        is_owner = playlist.created_by_id == user.id
        is_empty = len(playlist.tracks) == 0 if playlist.tracks else True
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await playlist_service.get_playlist_stats(int(playlist_id))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        playlist_text = format_playlist_info(playlist, stats, is_owner)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_playlist_actions_keyboard(
            playlist_id, 
            is_owner=is_owner, 
            is_empty=is_empty
        )
        
        await callback.message.edit_text(
            playlist_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing playlist details: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞", show_alert=True)


@playlist_router.callback_query(F.data == "create_playlist")
async def start_create_playlist(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        create_text = (
            "üìã **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏"
        )
        
        keyboard = get_cancel_keyboard()
        
        await callback.message.edit_text(
            create_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.set_state(PlaylistStates.waiting_for_name)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error starting playlist creation: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞", show_alert=True)


@playlist_router.message(PlaylistStates.waiting_for_name)
async def process_playlist_name(message: Message, state: FSMContext, user, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        name = message.text.strip()
        
        if len(name) > 100:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
        if len(name) < 1:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(name=name)
        
        description_text = (
            f"üìã **–ü–ª–µ–π–ª–∏—Å—Ç: "{name}"**\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
            "üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ –ú–æ—è –ª—é–±–∏–º–∞—è –º—É–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
            "‚Ä¢ –†–µ–ª–∞–∫—Å –º—É–∑—ã–∫–∞ –¥–ª—è —Å–Ω–∞\n"
            "‚Ä¢ –•–∏—Ç—ã 2024 –≥–æ–¥–∞\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è."
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
        )
        
        await message.answer(
            description_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.set_state(PlaylistStates.waiting_for_description)
        
    except Exception as e:
        logger.error(f"Error processing playlist name: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è")


@playlist_router.message(PlaylistStates.waiting_for_description)
async def process_playlist_description(message: Message, state: FSMContext, user, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        description = message.text.strip()
        
        if len(description) > 500:
            await message.answer(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(description=description)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        await create_playlist_final(message, state, user, description)
        
    except Exception as e:
        logger.error(f"Error processing playlist description: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è")


@playlist_router.callback_query(F.data == "skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext, user, **kwargs):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        await create_playlist_final(callback.message, state, user, None)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error skipping description: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def create_playlist_final(message: Message, state: FSMContext, user, description: Optional[str]):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        data = await state.get_data()
        name = data.get('name')
        
        if not name:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        playlist_data = PlaylistCreate(
            name=name,
            description=description,
            is_public=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
        )
        
        playlist = await playlist_service.create_playlist(user.id, playlist_data)
        
        if not playlist:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
            return
        
        success_text = (
            f"‚úÖ **–ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
        )
        
        if description:
            success_text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
        
        success_text += (
            f"üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** –ü—Ä–∏–≤–∞—Ç–Ω—ã–π\n"
            f"üÜî **ID:** {playlist.id}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–≥–æ —Ç—Ä–µ–∫–∏!"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = get_playlist_actions_keyboard(str(playlist.id), is_owner=True, is_empty=True)
        
        await message.answer(
            success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.clear()
        
        await bot_logger.log_update(
            update_type="playlist_created",
            user_id=user.telegram_id,
            playlist_id=str(playlist.id),
            playlist_name=name
        )
        
    except Exception as e:
        logger.error(f"Error creating playlist: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞")


@playlist_router.callback_query(F.data.startswith("add_to_playlist:"))
async def show_add_to_playlist(callback: CallbackQuery, user, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    try:
        parts = callback.data.split(":")
        track_id = parts[1]
        source = parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        playlists = await playlist_service.get_user_playlists(user.id, limit=20)
        
        if not playlists:
            no_playlists_text = (
                "üìã **–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤**\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –Ω–µ–≥–æ —Ç—Ä–µ–∫–∏."
            )
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", 
                    callback_data=f"create_playlist_with_track:{track_id}:{source}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=f"track:{track_id}:{source}"
                )
            )
            
            await callback.message.edit_text(
                no_playlists_text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        keyboard = get_add_to_playlist_keyboard(playlists, track_id, source)
        
        select_text = (
            "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç**\n\n"
            "–í –∫–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫?"
        )
        
        await callback.message.edit_text(
            select_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing add to playlist: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤", show_alert=True)


@playlist_router.callback_query(F.data.startswith("add_track_to_playlist:"))
async def add_track_to_playlist(callback: CallbackQuery, user, **kwargs):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
    try:
        parts = callback.data.split(":")
        playlist_id = int(parts[1])
        track_id = parts[2]
        source = parts[3]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
        playlist = await playlist_service.get_playlist_by_id(playlist_id, user.id)
        if not playlist:
            await callback.answer("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
        track_data = PlaylistTrackAdd(track_id=track_id)
        success = await playlist_service.add_track_to_playlist(playlist_id, user.id, track_data)
        
        if success:
            success_text = (
                f"‚úÖ **–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç!**\n\n"
                f"üìã **–ü–ª–µ–π–ª–∏—Å—Ç:** {playlist.name}\n"
                f"üéµ **–¢—Ä–µ–∫–æ–≤:** {len(playlist.tracks) + 1 if playlist.tracks else 1}"
            )
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üìã –û—Ç–∫—Ä—ã—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", 
                    callback_data=f"playlist:{playlist_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚ûï –í –¥—Ä—É–≥–æ–π –ø–ª–µ–π–ª–∏—Å—Ç", 
                    callback_data=f"add_to_playlist:{track_id}:{source}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ö —Ç—Ä–µ–∫—É", 
                    callback_data=f"track:{track_id}:{source}"
                )
            )
            
            await callback.message.edit_text(
                success_text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
            
            await bot_logger.log_update(
                update_type="track_added_to_playlist",
                user_id=user.telegram_id,
                playlist_id=str(playlist_id),
                track_id=track_id
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.", show_alert=True)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error adding track to playlist: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞", show_alert=True)


@playlist_router.callback_query(F.data.startswith("delete_playlist:"))
async def confirm_delete_playlist(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        playlist_id = callback.data.split(":")[1]
        
        confirm_text = (
            "‚ö†Ô∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞**\n\n"
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        )
        
        keyboard = get_confirmation_keyboard("delete_playlist", playlist_id)
        
        await callback.message.edit_text(
            confirm_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming playlist deletion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@playlist_router.callback_query(F.data.startswith("confirm:delete_playlist:"))
async def delete_playlist_confirmed(callback: CallbackQuery, user, **kwargs):
    """–£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        playlist_id = int(callback.data.split(":")[2])
        
        success = await playlist_service.delete_playlist(playlist_id, user.id)
        
        if success:
            success_text = "‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            keyboard = get_back_to_menu_keyboard()
            
            await callback.message.edit_text(
                success_text,
                reply_markup=keyboard
            )
            
            await bot_logger.log_update(
                update_type="playlist_deleted",
                user_id=user.telegram_id,
                playlist_id=str(playlist_id)
            )
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", show_alert=True)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error deleting playlist: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


def format_playlist_info(playlist, stats: dict, is_owner: bool) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ"""
    text = f"üìã **{playlist.name}**\n\n"
    
    if playlist.description:
        text += f"üìù {playlist.description}\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    tracks_count = stats.get('tracks_count', 0)
    total_duration = stats.get('total_duration', 0)
    
    text += f"üéµ **–¢—Ä–µ–∫–æ–≤:** {tracks_count}\n"
    
    if total_duration > 0:
        hours = total_duration // 3600
        minutes = (total_duration % 3600) // 60
        if hours > 0:
            text += f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {hours}—á {minutes}–º–∏–Ω\n"
        else:
            text += f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {minutes}–º–∏–Ω\n"
    
    # –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    privacy_text = "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π" if not playlist.is_public else "üåê –ü—É–±–ª–∏—á–Ω—ã–π"
    text += f"üëÅÔ∏è **–î–æ—Å—Ç—É–ø:** {privacy_text}\n"
    
    # –ñ–∞–Ω—Ä—ã
    genres = stats.get('genres', [])
    if genres:
        genres_text = ", ".join(genres[:3])
        if len(genres) > 3:
            genres_text += f" –∏ –µ—â—ë {len(genres) - 3}"
        text += f"üé≠ **–ñ–∞–Ω—Ä—ã:** {genres_text}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
    if is_owner:
        created_at = stats.get('created_at')
        if created_at:
            text += f"üìÖ **–°–æ–∑–¥–∞–Ω:** {created_at.strftime('%d.%m.%Y')}\n"
    
    return text


# –û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@playlist_router.callback_query(F.data.in_(["cancel", "cancel_creation"]))
@playlist_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(event, state: FSMContext, **kwargs):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    try:
        await state.clear()
        
        cancel_text = "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        keyboard = get_back_to_menu_keyboard()
        
        if isinstance(event, Message):
            await event.answer(cancel_text, reply_markup=keyboard)
        else:
            await event.message.edit_text(cancel_text, reply_markup=keyboard)
            await event.answer()
            
    except Exception as e:
        logger.error(f"Error cancelling action: {e}")


from aiogram.types import InlineKeyboardButton