# app/bot/handlers/admin.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""
import asyncio
from typing import List, Dict, Any
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.core.logging import get_logger, bot_logger
from app.services.user_service import user_service
from app.services.analytics_service import analytics_service
from app.services.broadcast_service import broadcast_service
from app.services.subscription_service import subscription_service
from app.services.search_service import search_service
from app.bot.keyboards.inline import (
    get_admin_keyboard, get_broadcast_keyboard, 
    get_confirmation_keyboard, get_back_to_menu_keyboard
)
from app.bot.filters.admin import AdminFilter
from app.core.config import settings
from app.models.user import UserStatus, SubscriptionType

router = Router()
logger = get_logger(__name__)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∞ –∫–æ –≤—Å–µ–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    main_menu = State()
    user_management = State()
    broadcast_compose = State()
    broadcast_confirm = State()
    user_search = State()
    system_settings = State()


@router.message(Command("admin"))
@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(event, user, **kwargs):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_admin_dashboard_stats()
        
        admin_text = (
            "üë®‚Äçüíº **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
            
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}:**\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']:,}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {stats['active_24h']:,}\n"
            f"üëë Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['premium_users']:,}\n"
            f"üîç –ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['searches_today']:,}\n"
            f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['downloads_today']:,}\n"
            f"üí∞ –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü: {stats['revenue_month']:,}‚ÇΩ\n\n"
            
            f"‚ö° **–°–∏—Å—Ç–µ–º–∞:**\n"
            f"üìà –ù–∞–≥—Ä—É–∑–∫–∞: {stats['system_load']:.1f}%\n"
            f"üíæ –ü–∞–º—è—Ç—å: {stats['memory_usage']:.1f}%\n"
            f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {stats['db_status']}\n"
            f"üîÑ –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á: {stats['queue_size']} –∑–∞–¥–∞—á\n\n"
            
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        
        keyboard = get_admin_keyboard()
        
        if isinstance(event, Message):
            await event.answer(
                admin_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await event.message.edit_text(
                admin_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await event.answer()
        
        await bot_logger.log_update(
            update_type="admin_panel_access",
            user_id=user.telegram_id,
            admin_action="dashboard_view"
        )
        
    except Exception as e:
        logger.error(f"Error showing user details: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin:ban_user:"))
async def ban_user(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.data.split(":")[2]
        
        ban_text = (
            "üö´ **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏—á–∏–Ω:\n"
            "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –°–ø–∞–º –∏–ª–∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin:user_detail:{user_id}")
        )
        
        await callback.message.edit_text(
            ban_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.update_data(ban_user_id=user_id)
        await state.set_state(AdminStates.user_management)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error initiating user ban: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(AdminStates.user_management, F.text)
async def process_ban_reason(message: Message, admin_user, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        data = await state.get_data()
        user_id = data.get("ban_user_id")
        ban_reason = message.text.strip()
        
        if not user_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        success = await user_service.ban_user(
            user_id=int(user_id),
            reason=ban_reason,
            banned_by=admin_user.id
        )
        
        if success:
            await message.answer(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                f"üÜî ID: {user_id}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n"
                f"üë®‚Äçüíº –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: {admin_user.first_name or admin_user.username}\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                parse_mode="Markdown"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            await bot_logger.log_update(
                update_type="user_banned",
                user_id=admin_user.telegram_id,
                admin_action="ban_user",
                target_user_id=user_id,
                reason=ban_reason
            )
            
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing ban reason: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ")


@router.callback_query(F.data.startswith("admin:unban_user:"))
async def unban_user(callback: CallbackQuery, admin_user, **kwargs):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.data.split(":")[2]
        
        success = await user_service.unban_user(
            user_id=int(user_id),
            unbanned_by=admin_user.id
        )
        
        if success:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await show_user_details(callback)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            await bot_logger.log_update(
                update_type="user_unbanned",
                user_id=admin_user.telegram_id,
                admin_action="unban_user",
                target_user_id=user_id
            )
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error unbanning user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin:grant_premium:"))
async def grant_premium(callback: CallbackQuery, **kwargs):
    """–í—ã–¥–∞—á–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = callback.data.split(":")[2]
        
        premium_text = (
            "üëë **–í—ã–¥–∞—á–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        durations = [
            ("7 –¥–Ω–µ–π", "7"),
            ("1 –º–µ—Å—è—Ü", "30"),
            ("3 –º–µ—Å—è—Ü–∞", "90"),
            ("1 –≥–æ–¥", "365"),
            ("–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ", "lifetime")
        ]
        
        for duration_name, duration_days in durations:
            builder.row(
                InlineKeyboardButton(
                    text=f"‚è∞ {duration_name}",
                    callback_data=f"admin:premium_duration:{user_id}:{duration_days}"
                )
            )
        
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin:user_detail:{user_id}")
        )
        
        await callback.message.edit_text(
            premium_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error granting premium: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin:premium_duration:"))
async def confirm_premium_grant(callback: CallbackQuery, admin_user, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ Premium"""
    try:
        parts = callback.data.split(":")
        user_id = parts[2]
        duration = parts[3]
        
        # –í—ã–¥–∞–µ–º Premium –ø–æ–¥–ø–∏—Å–∫—É
        if duration == "lifetime":
            subscription_type = SubscriptionType.LIFETIME
            duration_days = None
        else:
            subscription_type = SubscriptionType.PREMIUM_MONTHLY
            duration_days = int(duration)
        
        success = await subscription_service.grant_premium(
            user_id=int(user_id),
            subscription_type=subscription_type,
            duration_days=duration_days,
            granted_by=admin_user.id,
            reason="Admin grant"
        )
        
        if success:
            duration_text = "–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ" if duration == "lifetime" else f"–Ω–∞ {duration} –¥–Ω."
            await callback.answer(f"‚úÖ Premium –≤—ã–¥–∞–Ω {duration_text}", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await show_user_details(callback)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É Premium
            await bot_logger.log_update(
                update_type="premium_granted",
                user_id=admin_user.telegram_id,
                admin_action="grant_premium",
                target_user_id=user_id,
                subscription_type=subscription_type.value,
                duration=duration
            )
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ Premium", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error confirming premium grant: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin:broadcast")
async def admin_broadcast(callback: CallbackQuery, **kwargs):
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫
        broadcast_stats = await broadcast_service.get_broadcast_stats()
        
        broadcast_text = (
            "üì¢ **–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫**\n\n"
            
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {broadcast_stats['total_broadcasts']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {broadcast_stats['active_broadcasts']}\n"
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {broadcast_stats['broadcasts_month']}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: {broadcast_stats['successful_deliveries']}\n\n"
            
            f"üë• **–ê—É–¥–∏—Ç–æ—Ä–∏—è:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {broadcast_stats['total_users']:,}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {broadcast_stats['active_users']:,}\n"
            f"‚Ä¢ Premium: {broadcast_stats['premium_users']:,}\n"
            f"‚Ä¢ Free: {broadcast_stats['free_users']:,}\n\n"
            
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:"
        )
        
        keyboard = get_broadcast_keyboard()
        
        await callback.message.edit_text(
            broadcast_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing broadcast panel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("broadcast:"))
async def create_broadcast(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        broadcast_type = callback.data.split(":")[1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        target_counts = {
            "all": await user_service.get_users_count(),
            "premium": await user_service.get_users_count(premium_only=True),
            "free": await user_service.get_users_count(free_only=True),
            "inactive": await user_service.get_users_count(inactive_days=7)
        }
        
        target_names = {
            "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "premium": "Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", 
            "free": "Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "inactive": "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        }
        
        target_count = target_counts.get(broadcast_type, 0)
        target_name = target_names.get(broadcast_type, "–≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        
        compose_text = (
            f"‚úçÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {target_name}**\n\n"
            f"üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {target_count:,} —á–µ–ª.\n\n"
            
            "üìù **–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:**\n\n"
            
            "üí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ HTML —Ä–∞–∑–º–µ—Ç–∫–∞\n"
            "‚Ä¢ –≠–º–æ–¥–∑–∏\n"
            "‚Ä¢ –°—Å—ã–ª–∫–∏\n"
            "‚Ä¢ –î–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            
            "‚ö†Ô∏è **–ü—Ä–∞–≤–∏–ª–∞:**\n"
            "‚Ä¢ –ù–µ –±–æ–ª–µ–µ 1 —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "‚Ä¢ –°–æ–±–ª—é–¥–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n\n"
            
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º:"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:broadcast")
        )
        
        await callback.message.edit_text(
            compose_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.update_data(broadcast_type=broadcast_type, target_count=target_count)
        await state.set_state(AdminStates.broadcast_compose)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error creating broadcast: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(AdminStates.broadcast_compose)
async def process_broadcast_message(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        broadcast_message = message.text or message.caption
        
        if not broadcast_message:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        if len(broadcast_message) > 4096:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        data = await state.get_data()
        broadcast_type = data.get("broadcast_type")
        target_count = data.get("target_count")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏
        preview_text = (
            f"üìã **–ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            f"üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {target_count:,}\n"
            f"üìä **–¢–∏–ø:** {broadcast_type}\n\n"
            f"üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"{broadcast_message}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É?**"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                callback_data="confirm_broadcast"
            )
        )
        builder.row(
            InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:broadcast")
        )
        
        await message.answer(
            preview_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.update_data(broadcast_message=broadcast_message)
        await state.set_state(AdminStates.broadcast_confirm)
        
    except Exception as e:
        logger.error(f"Error processing broadcast message: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, admin_user, state: FSMContext, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        data = await state.get_data()
        broadcast_type = data.get("broadcast_type")
        broadcast_message = data.get("broadcast_message")
        target_count = data.get("target_count")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_task = await broadcast_service.create_broadcast(
            message_text=broadcast_message,
            target_type=broadcast_type,
            created_by=admin_user.id
        )
        
        if broadcast_task:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(
                execute_broadcast(broadcast_task.id, broadcast_message, broadcast_type)
            )
            
            success_text = (
                f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!**\n\n"
                f"üÜî ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_task.id}\n"
                f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {target_count:,}\n"
                f"‚è∞ –ó–∞–ø—É—â–µ–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
                f"‚ö° –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
            )
            
            keyboard = get_back_to_menu_keyboard()
            
            await callback.message.edit_text(
                success_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
            await bot_logger.log_update(
                update_type="broadcast_started",
                user_id=admin_user.telegram_id,
                admin_action="broadcast_create",
                broadcast_id=broadcast_task.id,
                target_type=broadcast_type,
                target_count=target_count
            )
            
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming broadcast: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin:analytics")
async def admin_analytics(callback: CallbackQuery, **kwargs):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = await get_detailed_analytics()
        
        analytics_text = (
            "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
            
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {analytics['users']['total']:,}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: +{analytics['users']['new_today']:,}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: {analytics['users']['active_today']:,}\n"
            f"‚Ä¢ Retention 7d: {analytics['users']['retention_7d']:.1f}%\n"
            f"‚Ä¢ Churn rate: {analytics['users']['churn_rate']:.1f}%\n\n"
            
            f"üîç **–ü–æ–∏—Å–∫–∏:**\n"
            f"‚Ä¢ –ó–∞ –¥–µ–Ω—å: {analytics['searches']['today']:,}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {analytics['searches']['week']:,}\n"
            f"‚Ä¢ Success rate: {analytics['searches']['success_rate']:.1f}%\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {analytics['searches']['avg_time']:.1f}—Å\n\n"
            
            f"üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏—è:**\n"
            f"‚Ä¢ –ó–∞ –¥–µ–Ω—å: {analytics['downloads']['today']:,}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {analytics['downloads']['week']:,}\n"
            f"‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {analytics['downloads']['top_source']}\n\n"
            
            f"üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {analytics['revenue']['today']:,}‚ÇΩ\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {analytics['revenue']['month']:,}‚ÇΩ\n"
            f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {analytics['revenue']['conversion']:.1f}%\n"
            f"‚Ä¢ ARPU: {analytics['revenue']['arpu']:,.0f}‚ÇΩ\n\n"
            
            f"‚ö° **–°–∏—Å—Ç–µ–º–∞:**\n"
            f"‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ CPU: {analytics['system']['cpu_usage']:.1f}%\n"
            f"‚Ä¢ –ü–∞–º—è—Ç—å: {analytics['system']['memory_usage']:.1f}%\n"
            f"‚Ä¢ –û—á–µ—Ä–µ–¥—å: {analytics['system']['queue_size']} –∑–∞–¥–∞—á\n"
            f"‚Ä¢ –û—à–∏–±–∫–∏/—á–∞—Å: {analytics['system']['errors_per_hour']}"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.row(
            InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin:charts"),
            InlineKeyboardButton(text="üìä –û—Ç—á–µ—Ç", callback_data="admin:report")
        )
        
        builder.row(
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin:export_analytics"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:analytics")
        )
        
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        )
        
        await callback.message.edit_text(
            analytics_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing analytics: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def get_admin_dashboard_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        stats = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stats['total_users'] = await user_service.get_users_count()
        stats['active_24h'] = await user_service.get_active_users_count(hours=24)
        stats['premium_users'] = await user_service.get_users_count(premium_only=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        stats['searches_today'] = await search_service.get_searches_count(days=1)
        stats['downloads_today'] = await analytics_service.get_downloads_count(days=1)
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats['revenue_month'] = await subscription_service.get_revenue(days=30)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats['system_load'] = await get_system_load()
        stats['memory_usage'] = await get_memory_usage()
        stats['db_status'] = await check_database_status()
        stats['queue_size'] = await get_queue_size()
        
        return stats
        
    except Exception as e:
        logger.error(f"Error getting dashboard stats: {e}")
        return {}


async def get_user_management_stats() -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        total = await user_service.get_users_count()
        active = await user_service.get_active_users_count(days=7)
        premium = await user_service.get_users_count(premium_only=True)
        blocked = await user_service.get_users_count(status=UserStatus.BANNED)
        
        new_today = await user_service.get_new_users_count(days=1)
        new_week = await user_service.get_new_users_count(days=7)
        new_month = await user_service.get_new_users_count(days=30)
        
        top_countries = await user_service.get_top_countries(limit=5)
        
        return {
            'total': total,
            'active': active,
            'premium': premium,
            'blocked': blocked,
            'active_percent': (active / total * 100) if total > 0 else 0,
            'premium_percent': (premium / total * 100) if total > 0 else 0,
            'new_today': new_today,
            'new_week': new_week,
            'new_month': new_month,
            'top_countries': top_countries
        }
        
    except Exception as e:
        logger.error(f"Error getting user management stats: {e}")
        return {}


def format_user_brief(user) -> str:
    """–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    name = user.first_name or user.username or f"User{user.telegram_id}"
    status_icon = "üü¢" if user.status == UserStatus.ACTIVE else "üî¥"
    premium_icon = "üëë" if user.subscription_type != SubscriptionType.FREE else "üÜì"
    
    return (
        f"{status_icon} {premium_icon} **{name}**\n"
        f"‚îú ID: `{user.telegram_id}`\n"
        f"‚îú Username: @{user.username or '–Ω–µ—Ç'}\n"
        f"‚îî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n"
    )


def format_user_details(user, user_stats, subscription) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    name = user.first_name or user.username or f"User{user.telegram_id}"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    details = (
        f"üë§ **{name}**\n\n"
        f"üÜî **ID:** `{user.telegram_id}`\n"
        f"üë§ **Username:** @{user.username or '–Ω–µ—Ç'}\n"
        f"üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚è∞ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user.last_activity_at.strftime('%d.%m.%Y %H:%M') if user.last_activity_at else '–Ω–∏–∫–æ–≥–¥–∞'}\n"
    )
    
    # –°—Ç–∞—Ç—É—Å
    status_text = {
        UserStatus.ACTIVE: "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π",
        UserStatus.BANNED: "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        UserStatus.INACTIVE: "üü° –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
    }
    details += f"üìä **–°—Ç–∞—Ç—É—Å:** {status_text.get(user.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    
    if user.status == UserStatus.BANNED and user.ban_reason:
        details += f"üö´ **–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {user.ban_reason}\n"
        if user.banned_at:
            details += f"üìÖ **–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {user.banned_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    # –ü–æ–¥–ø–∏—Å–∫–∞
    if subscription:
        sub_names = {
            SubscriptionType.FREE: "üÜì Free",
            SubscriptionType.PREMIUM_MONTHLY: "üëë Premium (–º–µ—Å—è—á–Ω–∞—è)",
            SubscriptionType.PREMIUM_QUARTERLY: "üëë Premium (3 –º–µ—Å—è—Ü–∞)", 
            SubscriptionType.PREMIUM_YEARLY: "üëë Premium (–≥–æ–¥–æ–≤–∞—è)",
            SubscriptionType.LIFETIME: "üíé Premium (–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è)"
        }
        
        details += f"üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** {sub_names.get(subscription.subscription_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        if subscription.expires_at:
            details += f"‚è∞ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {subscription.expires_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if user_stats:
        details += (
            f"\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"üîç –ü–æ–∏—Å–∫–æ–≤: {user_stats.total_searches:,}\n"
            f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {user_stats.total_downloads:,}\n"
            f"‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {user_stats.favorite_tracks_count}\n"
            f"üìã –ü–ª–µ–π–ª–∏—Å—Ç–æ–≤: {user_stats.playlists_count}\n"
        )
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    details += (
        f"\nüîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"üåê –Ø–∑—ã–∫: {user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {user.country_code or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user.city or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    )
    
    if user.referrer_id:
        details += f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {user.referrer_id}\n"
    
    return details


def create_user_actions_keyboard(user):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if user.status == UserStatus.ACTIVE:
        builder.row(
            InlineKeyboardButton(
                text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"admin:ban_user:{user.id}"
            )
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"admin:unban_user:{user.id}"
            )
        )
    
    # Premium –¥–µ–π—Å—Ç–≤–∏—è
    if user.subscription_type == SubscriptionType.FREE:
        builder.row(
            InlineKeyboardButton(
                text="üëë –í—ã–¥–∞—Ç—å Premium",
                callback_data=f"admin:grant_premium:{user.id}"
            )
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(
            text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            callback_data=f"admin:user_analytics:{user.id}"
        ),
        InlineKeyboardButton(
            text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            callback_data=f"admin:message_user:{user.id}"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –ø–æ–∏—Å–∫—É",
            callback_data="admin:user_search"
        )
    )
    
    return builder.as_markup()


async def
        logger.error(f"Error showing admin panel: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"
        
        if isinstance(event, Message):
            await event.answer(error_text)
        else:
            await event.answer(error_text, show_alert=True)


@router.callback_query(F.data == "admin:users")
async def admin_user_management(callback: CallbackQuery, **kwargs):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = await get_user_management_stats()
        
        users_text = (
            "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
            
            f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {user_stats['total']:,}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active']:,} ({user_stats['active_percent']:.1f}%)\n"
            f"‚Ä¢ Premium: {user_stats['premium']:,} ({user_stats['premium_percent']:.1f}%)\n"
            f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {user_stats['blocked']:,}\n\n"
            
            f"üÜï **–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {user_stats['new_today']:,}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {user_stats['new_week']:,}\n"
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {user_stats['new_month']:,}\n\n"
            
            f"üåç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è (—Ç–æ–ø-5):**\n"
        )
        
        for country, count in user_stats['top_countries']:
            users_text += f"‚Ä¢ {country}: {count:,}\n"
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.row(
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin:user_search"),
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:user_stats")
        )
        
        builder.row(
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin:blocked_users"),
            InlineKeyboardButton(text="üëë Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:premium_users")
        )
        
        builder.row(
            InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin:export_users"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="admin:cleanup_users")
        )
        
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        )
        
        await callback.message.edit_text(
            users_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in user management: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin:user_search")
async def admin_user_search(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        search_text = (
            "üîç **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ Telegram ID\n"
            "‚Ä¢ Username (–±–µ–∑ @)\n"
            "‚Ä¢ –ò–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é\n\n"
            "–ü—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ username –∏–ª–∏ –ò–≤–∞–Ω"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:users")
        )
        
        await callback.message.edit_text(
            search_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.set_state(AdminStates.user_search)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in user search: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(AdminStates.user_search)
async def process_user_search(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        search_query = message.text.strip()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = await user_service.search_users(search_query, limit=10)
        
        if not users:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:** `{search_query}`\n\n"
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        for user in users:
            user_info = format_user_brief(user)
            results_text += f"{user_info}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            builder.row(
                InlineKeyboardButton(
                    text=f"üë§ {user.first_name or user.username or str(user.telegram_id)}",
                    callback_data=f"admin:user_detail:{user.id}"
                )
            )
        
        builder.row(
            InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="admin:user_search"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin:users")
        )
        
        await message.answer(
            results_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing user search: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.callback_query(F.data.startswith("admin:user_detail:"))
async def show_user_details(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        user_id = callback.data.split(":")[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        user = await user_service.get_user_by_id(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        user_stats = await user_service.get_user_stats(user.telegram_id)
        subscription = await user_service.get_user_subscription(user.telegram_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        details_text = format_user_details(user, user_stats, subscription)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = create_user_actions_keyboard(user)
        
        await callback.message.edit_text(
            details_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error admin : {e}")