# app/bot/handlers/start.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional

from app.bot.keyboards.inline import (
    get_main_menu_keyboard,
    get_premium_keyboard,
    get_help_keyboard
)
from app.bot.utils.messages import Messages
from app.services import get_user_service, get_analytics_service
from app.core.logging import get_logger, bot_logger

router = Router()
logger = get_logger(__name__)


class MainStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    main_menu = State()
    waiting_search = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_service = get_user_service()
        analytics_service = get_analytics_service()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            language_code=message.from_user.language_code
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å
        is_premium = await user_service.is_premium_user(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await user_service.get_user_stats(message.from_user.id)
        
        # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        await analytics_service.track_user_event(
            user_id=user.id,
            event_type="start_command",
            event_data={
                "source": "telegram",
                "is_new_user": user_stats.tracks_downloaded == 0
            }
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = Messages.get_welcome_message(
            user_name=user.first_name or "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –º–µ–ª–æ–º–∞–Ω",
            is_premium=is_premium,
            tracks_count=user_stats.tracks_downloaded
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            text=welcome_text,
            reply_markup=get_main_menu_keyboard(is_premium=is_premium),
            parse_mode="HTML"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(MainStates.main_menu)
        
        await bot_logger.log_update(
            update_type="start_command",
            user_id=message.from_user.id,
            chat_id=message.chat.id,
            command="/start"
        )
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(is_premium=False)
        )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = Messages.get_help_message()
        
        await message.answer(
            text=help_text,
            reply_markup=get_help_keyboard(),
            parse_mode="HTML"
        )
        
        await bot_logger.log_update(
            update_type="help_command",
            user_id=message.from_user.id,
            chat_id=message.chat.id,
            command="/help"
        )
        
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.")


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_service = get_user_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å
        is_premium = await user_service.is_premium_user(message.from_user.id)
        
        menu_text = Messages.get_main_menu_message(is_premium=is_premium)
        
        await message.answer(
            text=menu_text,
            reply_markup=get_main_menu_keyboard(is_premium=is_premium),
            parse_mode="HTML"
        )
        
        await state.set_state(MainStates.main_menu)
        
    except Exception as e:
        logger.error(f"Error in menu command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é.")


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_service = get_user_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å
        is_premium = await user_service.is_premium_user(callback.from_user.id)
        
        menu_text = Messages.get_main_menu_message(is_premium=is_premium)
        
        await callback.message.edit_text(
            text=menu_text,
            reply_markup=get_main_menu_keyboard(is_premium=is_premium),
            parse_mode="HTML"
        )
        
        await state.set_state(MainStates.main_menu)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in main menu callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é.")


@router.callback_query(F.data == "about")
async def callback_about(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    try:
        about_text = Messages.get_about_message()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
        
        await callback.message.edit_text(
            text=about_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in about callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


@router.callback_query(F.data == "stats")
async def callback_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_service = get_user_service()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await user_service.get_user_stats(callback.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        limits_info = await user_service.check_daily_limits(callback.from_user.id)
        
        stats_text = Messages.get_user_stats_message(
            stats=user_stats,
            limits=limits_info
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats"),
                    InlineKeyboardButton(text="üëë Premium", callback_data="premium_info")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
        
        await callback.message.edit_text(
            text=stats_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in stats callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.callback_query(F.data == "support")
async def callback_support(callback: CallbackQuery):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        support_text = Messages.get_support_message()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/music_bot_support"),
                    InlineKeyboardButton(text="üìß Email", url="mailto:support@musicbot.com")
                ],
                [
                    InlineKeyboardButton(text="üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="report_bug"),
                    InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", callback_data="suggest_feature")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
        
        await callback.message.edit_text(
            text=support_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in support callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")


@router.message(F.text.in_(["/start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –í –º–µ–Ω—é"]))
async def text_main_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await cmd_menu(message, state)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def text_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    await cmd_help(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.message(MainStates.main_menu)
async def handle_main_menu_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫
        if not message.text.startswith('/'):
            search_text = Messages.get_search_suggestion(message.text)
            
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"üîç –ù–∞–π—Ç–∏: {message.text[:30]}...", 
                        callback_data=f"search:{message.text}"
                    )],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="main_menu")]
                ]
            )
            
            await message.answer(
                text=search_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            await message.answer(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                reply_markup=get_main_menu_keyboard(is_premium=False)
            )
            
    except Exception as e:
        logger.error(f"Error handling main menu text: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
