# app/bot/handlers/inline.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import hashlib
from typing import List
from aiogram import Router, F
from aiogram.types import (
    InlineQuery, InlineQueryResultAudio, InlineQueryResultArticle,
    InputTextMessageContent, ChosenInlineResult
)

from app.core.logging import get_logger, bot_logger
from app.services.search_service import search_service
from app.services.user_service import user_service
from app.services.analytics_service import analytics_service
from app.services.music.aggregator import music_aggregator
from app.services.search_service import SearchRequest, SearchStrategy
from app.models.track import TrackSource
from app.core.security import user_rate_limiter

router = Router()
logger = get_logger(__name__)


@router.inline_query()
async def handle_inline_query(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        user_id = inline_query.from_user.id
        query = inline_query.query.strip()
        offset = int(inline_query.offset) if inline_query.offset else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_or_create_user(
            telegram_id=user_id,
            username=inline_query.from_user.username,
            first_name=inline_query.from_user.first_name,
            last_name=inline_query.from_user.last_name,
            language_code=inline_query.from_user.language_code
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.is_active:
            await inline_query.answer(
                results=[],
                cache_time=1,
                is_personal=True,
                switch_pm_text="‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                switch_pm_parameter="blocked"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤
        is_premium = await user_service.is_premium_user(user_id)
        rate_allowed = await user_rate_limiter.check_inline_limit(user_id, is_premium)
        
        if not rate_allowed:
            await inline_query.answer(
                results=[],
                cache_time=1,
                is_personal=True,
                switch_pm_text="‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
                switch_pm_parameter="rate_limit"
            )
            return
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if not query:
            results = await get_inline_suggestions(user_id)
            await inline_query.answer(
                results=results,
                cache_time=30,
                is_personal=True,
                switch_pm_text="üéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É",
                switch_pm_parameter="search"
            )
            return
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
        if len(query) < 2:
            await inline_query.answer(
                results=[],
                cache_time=1,
                is_personal=True,
                switch_pm_text="üí≠ –í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤",
                switch_pm_parameter="short_query"
            )
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_results = await perform_inline_search(
            query=query,
            user_id=user.id,
            is_premium=is_premium,
            offset=offset
        )
        
        if not search_results:
            # –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            no_results = await get_no_results_inline(query)
            await inline_query.answer(
                results=no_results,
                cache_time=5,
                is_personal=True,
                switch_pm_text="üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ",
                switch_pm_parameter=f"search_{hashlib.md5(query.encode()).hexdigest()[:8]}"
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ inline —Ñ–æ—Ä–º–∞—Ç
        inline_results = await convert_to_inline_results(search_results, query)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        has_more = len(search_results) >= 10  # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        next_offset = str(offset + len(search_results)) if has_more else ""
        
        await inline_query.answer(
            results=inline_results,
            cache_time=120,  # 2 –º–∏–Ω—É—Ç—ã –∫–µ—à–∞
            is_personal=True,
            next_offset=next_offset,
            switch_pm_text="üéµ –û—Ç–∫—Ä—ã—Ç—å –≤ –±–æ—Ç–µ",
            switch_pm_parameter=f"inline_{hashlib.md5(query.encode()).hexdigest()[:8]}"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º inline –∑–∞–ø—Ä–æ—Å
        await bot_logger.log_update(
            update_type="inline_query",
            user_id=user_id,
            query=query,
            results_count=len(inline_results),
            offset=offset
        )
        
    except Exception as e:
        logger.error(f"Error handling inline query: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
        await inline_query.answer(
            results=[],
            cache_time=1,
            is_personal=True,
            switch_pm_text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ - –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞",
            switch_pm_parameter="error"
        )


@router.chosen_inline_result()
async def handle_chosen_inline_result(chosen_result: ChosenInlineResult):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        user_id = chosen_result.from_user.id
        result_id = chosen_result.result_id
        query = chosen_result.query
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ
        track_info = parse_inline_result_id(result_id)
        
        if track_info:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç—Ä–µ–∫–∞
            await bot_logger.log_update(
                update_type="inline_result_chosen",
                user_id=user_id,
                query=query,
                track_id=track_info.get("track_id"),
                source=track_info.get("source"),
                position=track_info.get("position", 0)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            await analytics_service.track_inline_selection(
                user_id=user_id,
                query=query,
                track_id=track_info.get("track_id"),
                source=track_info.get("source"),
                position=track_info.get("position", 0)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            await search_service.update_track_popularity(
                track_id=track_info.get("track_id"),
                source=track_info.get("source"),
                interaction_type="inline_share"
            )
        
    except Exception as e:
        logger.error(f"Error handling chosen inline result: {e}")


async def perform_inline_search(query: str, user_id: int, is_premium: bool, offset: int = 0):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è inline —Ä–µ–∂–∏–º–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
        search_request = SearchRequest(
            query=query,
            user_id=user_id,
            limit=10,  # –ú–µ–Ω—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è inline
            offset=offset,
            strategy=SearchStrategy.FAST,  # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–ª—è inline
            use_cache=True,
            save_to_history=False  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º inline –ø–æ–∏—Å–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_response = await search_service.search(search_request)
        
        if not search_response or not search_response.results:
            return []
        
        return search_response.results[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    except Exception as e:
        logger.error(f"Error performing inline search: {e}")
        return []


async def convert_to_inline_results(tracks, query: str) -> List:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    results = []
    
    for i, track in enumerate(tracks):
        try:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_id = create_inline_result_id(track, i)
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            download_url = await get_track_download_url(track)
            
            if download_url:
                # –ê—É–¥–∏–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                audio_result = InlineQueryResultAudio(
                    id=result_id,
                    audio_url=download_url,
                    title=track.title,
                    performer=track.artist,
                    audio_duration=track.duration or 0,
                    caption=format_track_caption(track),
                    parse_mode="HTML",
                    thumb_url=get_track_thumb_url(track)
                )
                results.append(audio_result)
            else:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                article_result = InlineQueryResultArticle(
                    id=result_id,
                    title=f"{track.artist} - {track.title}",
                    description=format_track_description(track),
                    thumb_url=get_track_thumb_url(track),
                    input_message_content=InputTextMessageContent(
                        message_text=format_track_share_message(track, query),
                        parse_mode="HTML"
                    )
                )
                results.append(article_result)
                
        except Exception as e:
            logger.error(f"Error converting track to inline result: {e}")
            continue
    
    return results


async def get_inline_suggestions(user_id: int) -> List:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—É—Å—Ç–æ–≥–æ inline –∑–∞–ø—Ä–æ—Å–∞"""
    suggestions = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        popular_queries = await search_service.get_popular_queries(limit=5)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        user_suggestions = await get_user_suggestions(user_id)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        all_suggestions = user_suggestions + popular_queries
        
        for i, suggestion in enumerate(all_suggestions[:8]):
            suggestion_result = InlineQueryResultArticle(
                id=f"suggestion_{i}_{hashlib.md5(suggestion.encode()).hexdigest()[:8]}",
                title=f"üîç {suggestion}",
                description="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞",
                thumb_url="https://your-domain.com/search_icon.png",
                input_message_content=InputTextMessageContent(
                    message_text=f"üéµ –ü–æ–∏—Å–∫: {suggestion}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @musicbot –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏!",
                    parse_mode="HTML"
                )
            )
            suggestions.append(suggestion_result)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if len(suggestions) < 5:
            general_suggestions = [
                "üéµ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞",
                "üî• —Ö–∏—Ç—ã 2024",
                "üé∏ —Ä–æ–∫ –º—É–∑—ã–∫–∞",
                "üéß —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞",
                "üé§ —Ä—É—Å—Å–∫–∏–µ —Ö–∏—Ç—ã"
            ]
            
            for i, suggestion in enumerate(general_suggestions):
                if len(suggestions) >= 8:
                    break
                    
                suggestion_result = InlineQueryResultArticle(
                    id=f"general_{i}",
                    title=suggestion,
                    description="–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    thumb_url="https://your-domain.com/music_icon.png",
                    input_message_content=InputTextMessageContent(
                        message_text=f"{suggestion}\n\nüéµ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É: @musicbot",
                        parse_mode="HTML"
                    )
                )
                suggestions.append(suggestion_result)
        
    except Exception as e:
        logger.error(f"Error getting inline suggestions: {e}")
    
    return suggestions


async def get_no_results_inline(query: str) -> List:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    return [
        InlineQueryResultArticle(
            id="no_results",
            title="üö´ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            description=f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç",
            thumb_url="https://your-domain.com/no_results_icon.png",
            input_message_content=InputTextMessageContent(
                message_text=(
                    f"üîç –ü–æ–∏—Å–∫: <b>{query}</b>\n\n"
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                    "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                    "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫\n"
                    "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
                    "üéµ –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ @musicbot"
                ),
                parse_mode="HTML"
            )
        )
    ]


async def get_user_suggestions(user_id: int) -> List[str]:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recent_searches = await search_service.get_user_search_history(
            user_id, limit=5
        )
        
        suggestions = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for search in recent_searches:
            if search.results_count > 0:  # –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–æ–∏—Å–∫–∏
                suggestions.append(search.query)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∂–∞–Ω—Ä–æ–≤
        user_stats = await analytics_service.get_user_music_preferences(user_id)
        
        if user_stats and user_stats.get('favorite_genres'):
            for genre in user_stats['favorite_genres'][:2]:
                suggestions.append(f"{genre} –º—É–∑—ã–∫–∞")
        
        return suggestions[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        
    except Exception as e:
        logger.error(f"Error getting user suggestions: {e}")
        return []


async def get_track_download_url(track) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ
        if hasattr(track, 'download_url') and track.download_url:
            return str(track.download_url)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
        track_source = TrackSource(track.source)
        
        async with music_aggregator:
            download_result = await music_aggregator.get_download_url(
                track_id=track.external_id,
                source=track_source
            )
        
        if download_result and download_result.url:
            return download_result.url
        
        return None
        
    except Exception as e:
        logger.error(f"Error getting download URL for track {track.id}: {e}")
        return None


def create_inline_result_id(track, position: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ ID –¥–ª—è inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    # –§–æ—Ä–º–∞—Ç: source_trackid_position_hash
    track_data = f"{track.source}_{track.external_id}_{position}"
    track_hash = hashlib.md5(track_data.encode()).hexdigest()[:8]
    return f"{track.source.value}_{track.external_id}_{position}_{track_hash}"


def parse_inline_result_id(result_id: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ ID inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        parts = result_id.split("_")
        if len(parts) >= 4:
            return {
                "source": parts[0],
                "track_id": parts[1], 
                "position": int(parts[2]),
                "hash": parts[3]
            }
    except:
        pass
    return {}


def format_track_caption(track) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞"""
    caption = f"üéµ <b>{track.artist} - {track.title}</b>\n"
    
    if track.album:
        caption += f"üíø {track.album}\n"
    
    if track.duration:
        minutes = track.duration // 60
        seconds = track.duration % 60
        caption += f"‚è±Ô∏è {minutes}:{seconds:02d}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ
    quality_icons = {
        "ultra": "üíé",
        "high": "üîπ",
        "medium": "üî∏", 
        "low": "üîª"
    }
    
    quality_icon = quality_icons.get(track.audio_quality.value.lower(), "üéµ")
    caption += f"{quality_icon} {track.audio_quality.value.title()}\n"
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫
    source_names = {
        "vk_audio": "VK Music",
        "youtube": "YouTube",
        "spotify": "Spotify"
    }
    
    source_name = source_names.get(track.source.value, track.source.value)
    caption += f"üìª {source_name}\n"
    
    caption += f"\nü§ñ –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ @musicbot"
    
    return caption


def format_track_description(track) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è article —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    description_parts = []
    
    if track.album:
        description_parts.append(f"üíø {track.album}")
    
    if track.duration:
        minutes = track.duration // 60
        seconds = track.duration % 60
        description_parts.append(f"‚è±Ô∏è {minutes}:{seconds:02d}")
    
    if track.genre:
        description_parts.append(f"üé≠ {track.genre}")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
    description_parts.append(f"üìª {track.source.value}")
    description_parts.append(f"üîä {track.audio_quality.value}")
    
    return " ‚Ä¢ ".join(description_parts) if description_parts else "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫"


def format_track_share_message(track, query: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞"""
    message = f"üéµ <b>{track.artist} - {track.title}</b>\n\n"
    
    if track.album:
        message += f"üíø <b>–ê–ª—å–±–æ–º:</b> {track.album}\n"
    
    if track.year:
        message += f"üìÖ <b>–ì–æ–¥:</b> {track.year}\n"
    
    if track.genre:
        message += f"üé≠ <b>–ñ–∞–Ω—Ä:</b> {track.genre}\n"
    
    if track.duration:
        minutes = track.duration // 60
        seconds = track.duration % 60
        message += f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {minutes}:{seconds:02d}\n"
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
    quality_text = {
        "ultra": "üíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (320kbps)",
        "high": "üîπ –í—ã—Å–æ–∫–æ–µ (256kbps)",
        "medium": "üî∏ –°—Ä–µ–¥–Ω–µ–µ (192kbps)",
        "low": "üîª –ë–∞–∑–æ–≤–æ–µ (128kbps)"
    }
    
    quality_desc = quality_text.get(track.audio_quality.value.lower(), track.audio_quality.value)
    message += f"üîä <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {quality_desc}\n"
    
    source_names = {
        "vk_audio": "VK Music",
        "youtube": "YouTube Music", 
        "spotify": "Spotify"
    }
    
    source_name = source_names.get(track.source.value, track.source.value)
    message += f"üìª <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source_name}\n"
    
    message += f"\nüîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {query}\n"
    message += f"\nüéß <b>–°–∫–∞—á–∞—Ç—å –∏ —Å–ª—É—à–∞—Ç—å:</b> @musicbot"
    
    return message


def get_track_thumb_url(track) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Ç—Ä–µ–∫–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ–±–ª–æ–∂–∫–∏ –∞–ª—å–±–æ–º–æ–≤
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
    
    # –†–∞–∑–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    thumb_urls = {
        "vk_audio": "https://your-domain.com/icons/vk_thumb.png",
        "youtube": "https://your-domain.com/icons/youtube_thumb.png", 
        "spotify": "https://your-domain.com/icons/spotify_thumb.png"
    }
    
    return thumb_urls.get(
        track.source.value, 
        "https://your-domain.com/icons/default_music_thumb.png"
    )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ inline –∫–æ–º–∞–Ω–¥—ã

@router.inline_query(F.query.startswith("top"))
async def handle_top_inline_query(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–æ–ø –º—É–∑—ã–∫–∏"""
    try:
        user_id = inline_query.from_user.id
        query = inline_query.query
        
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø —Ç–æ–ø–∞
        if "weekly" in query.lower() or "–Ω–µ–¥–µ–ª—è" in query.lower():
            top_type = "weekly"
            title = "üî• –¢–æ–ø –Ω–µ–¥–µ–ª–∏"
        elif "monthly" in query.lower() or "–º–µ—Å—è—Ü" in query.lower():
            top_type = "monthly" 
            title = "üìà –¢–æ–ø –º–µ—Å—è—Ü–∞"
        else:
            top_type = "daily"
            title = "‚ö° –¢–æ–ø –¥–Ω—è"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ç—Ä–µ–∫–∏
        top_tracks = await search_service.get_trending_tracks(
            period=top_type,
            limit=10
        )
        
        if not top_tracks:
            await inline_query.answer(
                results=[],
                cache_time=60,
                switch_pm_text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                switch_pm_parameter="no_stats"
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = await convert_to_inline_results(top_tracks, title)
        
        await inline_query.answer(
            results=results,
            cache_time=300,  # 5 –º–∏–Ω—É—Ç –∫–µ—à–∞ –¥–ª—è —Ç–æ–ø–æ–≤
            is_personal=False,  # –¢–æ–ø—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è –≤—Å–µ—Ö
            switch_pm_text="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            switch_pm_parameter="trending"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ø–∞
        await bot_logger.log_update(
            update_type="inline_top_request",
            user_id=user_id,
            top_type=top_type,
            results_count=len(results)
        )
        
    except Exception as e:
        logger.error(f"Error handling top inline query: {e}")
        await inline_query.answer(
            results=[],
            cache_time=1,
            switch_pm_text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞",
            switch_pm_parameter="error"
        )


@router.inline_query(F.query.startswith("genre:"))
async def handle_genre_inline_query(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º"""
    try:
        user_id = inline_query.from_user.id
        query = inline_query.query
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä
        genre = query.replace("genre:", "").strip()
        
        if not genre:
            await inline_query.answer(
                results=[],
                cache_time=1,
                switch_pm_text="üé≠ –£–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä",
                switch_pm_parameter="genres"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –ø–æ –∂–∞–Ω—Ä—É
        genre_tracks = await search_service.search_by_genre(
            genre=genre,
            limit=10
        )
        
        if not genre_tracks:
            no_genre_result = InlineQueryResultArticle(
                id="no_genre_tracks",
                title=f"üé≠ –ñ–∞–Ω—Ä: {genre}",
                description="–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                input_message_content=InputTextMessageContent(
                    message_text=f"üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É: <b>{genre}</b>\n\n‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\nüéµ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ @musicbot",
                    parse_mode="HTML"
                )
            )
            
            await inline_query.answer(
                results=[no_genre_result],
                cache_time=60,
                switch_pm_text="üé≠ –í—Å–µ –∂–∞–Ω—Ä—ã",
                switch_pm_parameter="genres"
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = await convert_to_inline_results(genre_tracks, f"–ñ–∞–Ω—Ä: {genre}")
        
        await inline_query.answer(
            results=results,
            cache_time=600,  # 10 –º–∏–Ω—É—Ç –∫–µ—à–∞ –¥–ª—è –∂–∞–Ω—Ä–æ–≤
            is_personal=False,
            switch_pm_text=f"üé≠ –ë–æ–ª—å—à–µ {genre}",
            switch_pm_parameter=f"genre_{genre.lower()}"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É
        await bot_logger.log_update(
            update_type="inline_genre_search",
            user_id=user_id,
            genre=genre,
            results_count=len(results)
        )
        
    except Exception as e:
        logger.error(f"Error handling genre inline query: {e}")
        await inline_query.answer(
            results=[],
            cache_time=1,
            switch_pm_text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∂–∞–Ω—Ä–∞",
            switch_pm_parameter="error"
        )


@router.inline_query(F.query.startswith("artist:"))
async def handle_artist_inline_query(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"""
    try:
        user_id = inline_query.from_user.id
        query = inline_query.query
        offset = int(inline_query.offset) if inline_query.offset else 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        artist_name = query.replace("artist:", "").strip()
        
        if not artist_name:
            await inline_query.answer(
                results=[],
                cache_time=1,
                switch_pm_text="üé§ –£–∫–∞–∂–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                switch_pm_parameter="artists"
            )
            return
        
        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        search_request = SearchRequest(
            query=artist_name,
            user_id=await user_service.get_user_by_telegram_id(user_id),
            limit=10,
            offset=offset,
            strategy=SearchStrategy.ARTIST_FOCUS,
            use_cache=True,
            save_to_history=False
        )
        
        search_response = await search_service.search(search_request)
        
        if not search_response or not search_response.results:
            no_artist_result = InlineQueryResultArticle(
                id="no_artist_tracks",
                title=f"üé§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist_name}",
                description="–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                input_message_content=InputTextMessageContent(
                    message_text=(
                        f"üé§ –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: <b>{artist_name}</b>\n\n"
                        "‚ùå –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n\n"
                        "üéµ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: @musicbot"
                    ),
                    parse_mode="HTML"
                )
            )
            
            await inline_query.answer(
                results=[no_artist_result],
                cache_time=60,
                switch_pm_text=f"üé§ –ù–∞–π—Ç–∏ {artist_name}",
                switch_pm_parameter=f"artist_{hashlib.md5(artist_name.encode()).hexdigest()[:8]}"
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = await convert_to_inline_results(
            search_response.results, 
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist_name}"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        has_more = len(search_response.results) >= 10
        next_offset = str(offset + len(search_response.results)) if has_more else ""
        
        await inline_query.answer(
            results=results,
            cache_time=300,  # 5 –º–∏–Ω—É—Ç –∫–µ—à–∞
            is_personal=False,
            next_offset=next_offset,
            switch_pm_text=f"üé§ –í—Å–µ —Ç—Ä–µ–∫–∏ {artist_name}",
            switch_pm_parameter=f"artist_{hashlib.md5(artist_name.encode()).hexdigest()[:8]}"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await bot_logger.log_update(
            update_type="inline_artist_search", 
            user_id=user_id,
            artist=artist_name,
            results_count=len(results),
            offset=offset
        )
        
    except Exception as e:
        logger.error(f"Error handling artist inline query: {e}")
        await inline_query.answer(
            results=[],
            cache_time=1,
            switch_pm_text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
            switch_pm_parameter="error"
        )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö inline –∫–æ–º–∞–Ω–¥

async def get_inline_help_results() -> List:
    """–ü–æ–º–æ—â—å –ø–æ inline –∫–æ–º–∞–Ω–¥–∞–º"""
    help_results = [
        InlineQueryResultArticle(
            id="inline_help",
            title="‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å inline —Ä–µ–∂–∏–º",
            description="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞",
            thumb_url="https://your-domain.com/icons/help_icon.png",
            input_message_content=InputTextMessageContent(
                message_text=(
                    "üéµ <b>Inline —Ä–µ–∂–∏–º @musicbot</b>\n\n"
                    
                    "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                    "‚Ä¢ <code>@musicbot –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞</code> - –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏\n"
                    "‚Ä¢ <code>@musicbot top daily</code> - —Ç–æ–ø –¥–Ω—è\n"
                    "‚Ä¢ <code>@musicbot genre:—Ä–æ–∫</code> - –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É\n"
                    "‚Ä¢ <code>@musicbot artist:–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</code> - —Ç—Ä–µ–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n"
                    
                    "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                    "‚Ä¢ <code>@musicbot Imagine Dragons Believer</code>\n"
                    "‚Ä¢ <code>@musicbot genre:electronic</code>\n" 
                    "‚Ä¢ <code>@musicbot artist:Billie Eilish</code>\n\n"
                    
                    "üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                    "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –ª—é–±–æ–º —á–∞—Ç–µ\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º—É–∑—ã–∫–∏ –¥—Ä—É–∑—å—è–º\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Ç–æ–ø–∞–º –∏ –∂–∞–Ω—Ä–∞–º\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
                    
                    "ü§ñ –ü–æ–ª–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ @musicbot"
                ),
                parse_mode="HTML"
            )
        )
    ]
    
    return help_results


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤

async def handle_inline_error(inline_query: InlineQuery, error_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ inline —Ä–µ–∂–∏–º–µ"""
    try:
        error_result = InlineQueryResultArticle(
            id="inline_error",
            title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            description=error_message,
            thumb_url="https://your-domain.com/icons/error_icon.png",
            input_message_content=InputTextMessageContent(
                message_text=(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ inline —Ä–µ–∂–∏–º–∞</b>\n\n"
                    f"{error_message}\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞\n"
                    "‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å @musicbot\n\n"
                    "üÜò –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - —Å–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                ),
                parse_mode="HTML"
            )
        )
        
        await inline_query.answer(
            results=[error_result],
            cache_time=1,
            switch_pm_text="ü§ñ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞",
            switch_pm_parameter="error_recovery"
        )
        
    except Exception as e:
        logger.error(f"Error handling inline error: {e}")


# Inline —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

async def track_inline_usage(user_id: int, query_type: str, query: str, results_count: int):
    """–¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è inline —Ä–µ–∂–∏–º–∞"""
    try:
        await analytics_service.track_inline_usage(
            user_id=user_id,
            query_type=query_type,
            query=query,
            results_count=results_count,
            timestamp=datetime.utcnow()
        )
        
    except Exception as e:
        logger.error(f"Error tracking inline usage: {e}")


from datetime import datetime