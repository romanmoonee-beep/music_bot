# app/bot/handlers/premium.py
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Premium —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
"""
from typing import Optional
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, SuccessfulPayment
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.core.logging import get_logger, bot_logger
from app.services.user_service import user_service
from app.services.payment_service import payment_service
from app.services.subscription_service import subscription_service
from app.services.promo_code_service import promo_code_service
from app.bot.keyboards.inline import (
    get_premium_keyboard, get_premium_offer_keyboard,
    get_payment_method_keyboard, get_crypto_currencies_keyboard,
    get_back_to_menu_keyboard, get_confirmation_keyboard
)
from app.models.user import SubscriptionType
from app.models.subscription import PaymentMethod
from app.core.config import settings

router = Router()
logger = get_logger(__name__)


class PremiumStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Premium —Ñ—É–Ω–∫—Ü–∏–π"""
    selecting_plan = State()
    entering_promo_code = State()
    processing_payment = State()
    confirming_purchase = State()


@router.message(Command("premium"))
@router.callback_query(F.data == "premium")
async def show_premium_info(event, user, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Premium"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        is_premium = await user_service.is_premium_user(user.telegram_id)
        subscription = await user_service.get_user_subscription(user.telegram_id)
        
        if is_premium and subscription:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ Premium
            await show_current_subscription(event, user, subscription)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º Premium
            await show_premium_plans(event, user)
        
    except Exception as e:
        logger.error(f"Error showing premium info: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Premium"
        
        if isinstance(event, Message):
            await event.answer(error_text)
        else:
            await event.answer(error_text, show_alert=True)


async def show_current_subscription(event, user, subscription):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"""
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    if subscription.expires_at:
        days_left = max(0, (subscription.expires_at - datetime.utcnow()).days)
        time_left_text = f"{days_left} –¥–Ω."
    else:
        time_left_text = "‚àû"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    sub_type_names = {
        SubscriptionType.PREMIUM_MONTHLY: "Premium (–º–µ—Å—è—á–Ω–∞—è)",
        SubscriptionType.PREMIUM_QUARTERLY: "Premium (3 –º–µ—Å—è—Ü–∞)", 
        SubscriptionType.PREMIUM_YEARLY: "Premium (–≥–æ–¥–æ–≤–∞—è)",
        SubscriptionType.LIFETIME: "Premium (–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è)"
    }
    
    sub_name = sub_type_names.get(subscription.subscription_type, "Premium")
    
    premium_text = (
        "üëë **–í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
        f"üìã **–¢–∞—Ä–∏—Ñ:** {sub_name}\n"
        f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** {time_left_text}\n"
        f"üîÑ **–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:** {'–≤–∫–ª—é—á–µ–Ω–æ' if subscription.auto_renew else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        f"üìÖ **–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ:** {subscription.expires_at.strftime('%d.%m.%Y') if subscription.expires_at else '‚àû'}\n\n"
        
        "üíé **–í–∞—à–∏ Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
        "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ 320kbps\n"
        "‚úÖ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫\n"
        "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤\n"
        "‚úÖ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–∏–Ω–∫–∞–º\n"
        "‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
    )
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    if subscription.expires_at:  # –ï—Å–ª–∏ –Ω–µ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                callback_data="renew_subscription"
            )
        )
        
        if subscription.auto_renew:
            builder.row(
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
                    callback_data="disable_auto_renew"
                )
            )
        else:
            builder.row(
                InlineKeyboardButton(
                    text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", 
                    callback_data="enable_auto_renew"
                )
            )
    
    builder.row(
        InlineKeyboardButton(
            text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
            callback_data="payment_history"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    if isinstance(event, Message):
        await event.answer(
            premium_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
    else:
        await event.message.edit_text(
            premium_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        await event.answer()


async def show_premium_plans(event, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã Premium"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    user_stats = await user_service.get_user_stats(user.telegram_id)
    limits = await user_service.check_daily_limits(user.telegram_id)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
    potential_savings = calculate_potential_savings(user_stats)
    
    premium_text = (
        "üíé **–ü–æ–ª—É—á–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É!**\n\n"
        
        "üö´ **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –ü–æ–∏—Å–∫: {limits['searches_used']}/{limits['searches_limit']} –≤ –¥–µ–Ω—å\n"
        f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏—è: {limits['downloads_used']}/{limits['downloads_limit']} –≤ –¥–µ–Ω—å\n"
        f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –¥–æ 192kbps\n"
        f"‚Ä¢ –†–µ–∫–ª–∞–º–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞\n\n"
        
        "üëë **Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        "‚úÖ **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –ø–æ–∏—Å–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
        "‚úÖ **–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ** –¥–æ 320kbps\n"
        "‚úÖ **–ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã** –Ω–∞–≤—Å–µ–≥–¥–∞\n"
        "‚úÖ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫** - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤—ã–º\n"
        "‚úÖ **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        "‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤** –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "‚úÖ **–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø** –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "‚úÖ **–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞** –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ\n\n"
        
        "üí∞ **–¢–∞—Ä–∏—Ñ—ã:**\n"
        f"üìÖ **1 –º–µ—Å—è—Ü** - ‚≠ê 150 Stars (‚âà{format_price_rub(150)}‚ÇΩ)\n"
        f"üìÖ **3 –º–µ—Å—è—Ü–∞** - ‚≠ê 400 Stars (‚âà{format_price_rub(400)}‚ÇΩ) üî• -12%\n"
        f"üìÖ **1 –≥–æ–¥** - ‚≠ê 1400 Stars (‚âà{format_price_rub(1400)}‚ÇΩ) üî• -23%\n\n"
    )
    
    if potential_savings > 0:
        premium_text += f"üí° **–í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏—è:** –¥–æ {potential_savings}‚ÇΩ –≤ –≥–æ–¥\n\n"
    
    premium_text += "‚≠ê Stars –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä—è–º–æ –≤ Telegram!\nüíé –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"
    
    keyboard = get_premium_keyboard()
    
    if isinstance(event, Message):
        await event.answer(
            premium_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        await event.message.edit_text(
            premium_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await event.answer()


@router.callback_query(F.data.startswith("premium_plan:"))
async def select_premium_plan(callback: CallbackQuery, user, state: FSMContext, **kwargs):
    """–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    try:
        plan = callback.data.split(":")[1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞–Ω–∞
        plans = {
            "1month": {
                "name": "Premium –Ω–∞ 1 –º–µ—Å—è—Ü",
                "price_stars": 150,
                "duration_days": 30,
                "subscription_type": SubscriptionType.PREMIUM_MONTHLY,
                "discount": 0
            },
            "3months": {
                "name": "Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞", 
                "price_stars": 400,
                "duration_days": 90,
                "subscription_type": SubscriptionType.PREMIUM_QUARTERLY,
                "discount": 12
            },
            "1year": {
                "name": "Premium –Ω–∞ 1 –≥–æ–¥",
                "price_stars": 1400, 
                "duration_days": 365,
                "subscription_type": SubscriptionType.PREMIUM_YEARLY,
                "discount": 23
            }
        }
        
        plan_info = plans.get(plan)
        if not plan_info:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
        await state.update_data(selected_plan=plan_info)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        await show_payment_methods(callback, plan_info)
        
    except Exception as e:
        logger.error(f"Error selecting plan: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞", show_alert=True)


async def show_payment_methods(callback: CallbackQuery, plan_info: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã"""
    
    discount_text = f" (-{plan_info['discount']}%)" if plan_info['discount'] > 0 else ""
    
    payment_text = (
        f"üí≥ **–û–ø–ª–∞—Ç–∞: {plan_info['name']}**\n\n"
        f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ‚≠ê {plan_info['price_stars']} Stars{discount_text}\n"
        f"‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {plan_info['duration_days']} –¥–Ω–µ–π\n\n"
        
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:**\n\n"
        
        "‚≠ê **Telegram Stars** - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø—Ä—è–º–æ –≤ Telegram\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã, Apple Pay, Google Pay\n\n"
        
        "üíé **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞** - —á–µ—Ä–µ–∑ CryptoBot\n"
        "‚Ä¢ TON, Bitcoin, USDT, USDC\n"
        "‚Ä¢ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏\n"
        "‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞"
    )
    
    keyboard = get_payment_method_keyboard()
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await callback.answer()


@router.callback_query(F.data == "payment_method:stars")
async def pay_with_stars(callback: CallbackQuery, user, state: FSMContext, **kwargs):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        data = await state.get_data()
        plan_info = data.get("selected_plan")
        
        if not plan_info:
            await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
        prices = [LabeledPrice(
            label=plan_info["name"],
            amount=plan_info["price_stars"]
        )]
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload
        import uuid
        payment_payload = f"premium_{user.telegram_id}_{uuid.uuid4().hex[:8]}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        await state.update_data(
            payment_payload=payment_payload,
            payment_method=PaymentMethod.TELEGRAM_STARS
        )
        
        await callback.message.answer_invoice(
            title=f"üî• {plan_info['name']}",
            description=(
                f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {plan_info['duration_days']} –¥–Ω–µ–π\n\n"
                "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
                "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ 320kbps\n" 
                "‚úÖ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n"
                "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫"
            ),
            payload=payment_payload,
            provider_token="",  # –î–ª—è Stars —Ç–æ–∫–µ–Ω –Ω–µ –Ω—É–∂–µ–Ω
            currency="XTR",  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã –¥–ª—è Stars
            prices=prices,
            start_parameter="premium_subscription",
            photo_url="https://your-domain.com/premium_image.jpg",  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            photo_width=512,
            photo_height=512
        )
        
        await callback.answer("üí≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω!")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
        await bot_logger.log_update(
            update_type="payment_invoice_created",
            user_id=user.telegram_id,
            payment_method="stars",
            amount=plan_info["price_stars"],
            plan=plan_info["name"]
        )
        
    except Exception as e:
        logger.error(f"Error creating Stars payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data == "payment_method:crypto")
async def pay_with_crypto(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    try:
        crypto_text = (
            "üíé **–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
            
            "üíé **TON** - –±—ã—Å—Ç—Ä–æ –∏ –¥–µ—à–µ–≤–æ\n"
            "‚Çø **Bitcoin** - —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è\n"
            "üíµ **USDT** - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
            "‚ö° **USDC** - —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –°–®–ê\n\n"
            
            "üîê –ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç @CryptoBot\n"
            "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        )
        
        keyboard = get_crypto_currencies_keyboard()
        
        await callback.message.edit_text(
            crypto_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing crypto payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("crypto_currency:"))
async def select_crypto_currency(callback: CallbackQuery, user, state: FSMContext, **kwargs):
    """–í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        currency = callback.data.split(":")[1]
        
        data = await state.get_data()
        plan_info = data.get("selected_plan")
        
        if not plan_info:
            await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ CryptoBot
        payment_result = await payment_service.create_crypto_payment(
            user_id=user.id,
            amount_stars=plan_info["price_stars"],
            currency=currency,
            subscription_type=plan_info["subscription_type"],
            duration_days=plan_info["duration_days"]
        )
        
        if not payment_result:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
        crypto_amount = convert_stars_to_crypto(plan_info["price_stars"], currency)
        
        payment_text = (
            f"üíé **–û–ø–ª–∞—Ç–∞ –≤ {currency}**\n\n"
            f"üí∞ **–ö –æ–ø–ª–∞—Ç–µ:** {crypto_amount} {currency}\n"
            f"üì¶ **–¢–æ–≤–∞—Ä:** {plan_info['name']}\n"
            f"üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment_result['payment_id']}`\n\n"
            
            f"**–î–ª—è –æ–ø–ª–∞—Ç—ã:**\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n"
            f"2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –≤ CryptoBot\n"
            f"3Ô∏è‚É£ Premium –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            
            f"‚è∞ **–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç:** 30 –º–∏–Ω—É—Ç\n"
            f"üîê **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** SSL + –±–ª–æ–∫—á–µ–π–Ω"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        builder.row(
            InlineKeyboardButton(
                text=f"üíé –û–ø–ª–∞—Ç–∏—Ç—å {crypto_amount} {currency}",
                url=payment_result["payment_url"]
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"check_payment:{payment_result['payment_id']}"
            )
        )
        
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="premium")
        )
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        await bot_logger.log_update(
            update_type="crypto_payment_created",
            user_id=user.telegram_id,
            payment_id=payment_result['payment_id'],
            currency=currency,
            amount=crypto_amount
        )
        
    except Exception as e:
        logger.error(f"Error creating crypto payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã Stars"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload
        data = await state.get_data()
        expected_payload = data.get("payment_payload")
        
        if pre_checkout_query.invoice_payload != expected_payload:
            await pre_checkout_query.answer(
                ok=False,
                error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞"
            )
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        await pre_checkout_query.answer(ok=True)
        
    except Exception as e:
        logger.error(f"Error in pre-checkout: {e}")
        await pre_checkout_query.answer(
            ok=False,
            error_message="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(F.successful_payment)
async def process_successful_payment(message: Message, user, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars"""
    try:
        payment = message.successful_payment
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
        data = await state.get_data()
        plan_info = data.get("selected_plan")
        
        if not plan_info:
            logger.error(f"No plan info for successful payment from user {user.id}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_result = await subscription_service.create_subscription(
            user_id=user.id,
            subscription_type=plan_info["subscription_type"],
            duration_days=plan_info["duration_days"],
            payment_method=PaymentMethod.TELEGRAM_STARS,
            payment_id=payment.telegram_payment_charge_id,
            amount_paid=payment.total_amount
        )
        
        if subscription_result:
            # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞
            success_text = (
                "üéâ **Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {plan_info['name']}\n"
                f"üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {format_subscription_end_date(plan_info['duration_days'])}\n"
                f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ: ‚≠ê {payment.total_amount} Stars\n\n"
                
                "üöÄ **–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:**\n"
                "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ 320kbps\n"
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
                
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üíé"
            )
            
            keyboard = get_back_to_menu_keyboard()
            
            await message.answer(
                success_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
            await bot_logger.log_update(
                update_type="premium_activated",
                user_id=user.telegram_id,
                subscription_type=plan_info["subscription_type"].value,
                payment_amount=payment.total_amount,
                duration_days=plan_info["duration_days"]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if settings.ADMIN_CHAT_ID:
                admin_text = (
                    f"üí∞ **–ù–æ–≤–∞—è Premium –ø–æ–¥–ø–∏—Å–∫–∞!**\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}\n"
                    f"üì¶ –ü–ª–∞–Ω: {plan_info['name']}\n" 
                    f"üí≥ –°—É–º–º–∞: {payment.total_amount} Stars\n"
                    f"üìÖ –î–æ: {format_subscription_end_date(plan_info['duration_days'])}"
                )
                
                try:
                    from app.bot.main import music_bot
                    await music_bot.bot.send_message(
                        chat_id=settings.ADMIN_CHAT_ID,
                        text=admin_text,
                        parse_mode="Markdown"
                    )
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω —á–∞—Ç
            
        else:
            # –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium.\n\n"
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
            )
            
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error processing successful payment: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
        )


@router.callback_query(F.data.startswith("check_payment:"))
async def check_payment_status(callback: CallbackQuery, user, **kwargs):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split(":")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_status = await payment_service.check_payment_status(payment_id)
        
        if payment_status == "paid":
            # –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription_activated = await payment_service.activate_subscription_by_payment(
                payment_id, user.id
            )
            
            if subscription_activated:
                await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
                await show_premium_info(callback, user)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
                
        elif payment_status == "pending":
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", show_alert=True)
            
        elif payment_status == "expired":
            await callback.answer("‚è∞ –°—á–µ—Ç –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π", show_alert=True)
            
        else:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data == "promo_code")
async def enter_promo_code(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        promo_text = (
            "üéÅ **–ü—Ä–æ–º–æ–∫–æ–¥**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:\n\n"
            "üí° **–ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:**\n"
            "‚Ä¢ –í –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @musicbot_news\n"
            "‚Ä¢ –í –∞–∫—Ü–∏—è—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö\n"
            "‚Ä¢ –û—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="premium")
        )
        
        await callback.message.edit_text(
            promo_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.set_state(PremiumStates.entering_promo_code)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error entering promo code: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(PremiumStates.entering_promo_code)
async def process_promo_code(message: Message, user, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    try:
        promo_code = message.text.strip().upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        promo_result = await promo_code_service.validate_promo_code(
            promo_code, user.telegram_id
        )
        
        if not promo_result.is_valid:
            error_text = (
                f"‚ùå **–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω**\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {promo_result.error_message}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞"
            )
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π –∫–æ–¥", callback_data="promo_code"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="premium")
            )
            
            await message.answer(
                error_text,
                reply_markup=builder.as_markup(),
                parse_mode="Markdown"
            )
            return
        
        # –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        await state.update_data(promo_code=promo_code, promo_discount=promo_result.discount_value)
        await state.clear()
        
        success_text = (
            f"üéâ **–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"üéÅ **–ö–æ–¥:** {promo_code}\n"
            f"üí∞ **–°–∫–∏–¥–∫–∞:** {promo_result.discount_value}"
        )
        
        if promo_result.discount_type == "percentage":
            success_text += "%\n"
        elif promo_result.discount_type == "fixed":
            success_text += " Stars\n"
        elif promo_result.discount_type == "free":
            success_text += " (–±–µ—Å–ø–ª–∞—Ç–Ω–æ!)\n"
        
        success_text += f"\nüíé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏:"
        
        keyboard = get_premium_keyboard()
        
        await message.answer(
            success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await bot_logger.log_update(
            update_type="promo_code_applied",
            user_id=user.telegram_id,
            promo_code=promo_code,
            discount_value=promo_result.discount_value
        )
        
    except Exception as e:
        logger.error(f"Error processing promo code: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")


@router.callback_query(F.data == "premium_benefits")
async def show_premium_benefits(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
    try:
        benefits_text = (
            "üíé **–ü–æ–¥—Ä–æ–±–Ω–æ –æ Premium**\n\n"
            
            "üöÄ **–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:**\n"
            "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–∏ (–≤–º–µ—Å—Ç–æ 30/–¥–µ–Ω—å)\n"
            "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–≤–º–µ—Å—Ç–æ 10/–¥–µ–Ω—å)\n"
            "‚Ä¢ üö´ –ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã\n\n"
            
            "üîä **–ö–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞:**\n"
            "‚Ä¢ üíé –î–æ 320 kbps (CD –∫–∞—á–µ—Å—Ç–≤–æ)\n"
            "‚Ä¢ üéß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤\n"
            "‚Ä¢ üìà –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n\n"
            
            "‚ö° **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:**\n"
            "‚Ä¢ ü•á –ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ üîç –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º\n"
            "‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n\n"
            
            "üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            "‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π\n"
            "‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã\n"
            "‚Ä¢ üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥\n\n"
            
            "üõ†Ô∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (Spotify, Apple Music)\n"
            "‚Ä¢ üíæ Backup –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏\n"
            "‚Ä¢ üéµ –£–º–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã\n\n"
            
            "üë®‚Äçüíª **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n"
            "‚Ä¢ üìû –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ üÜï –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "‚Ä¢ üí¨ –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏\n\n"
            
            "üí° **–≠–∫–æ–Ω–æ–º–∏—è:**\n"
            "‚Ä¢ üì± –ó–∞–º–µ–Ω–∞ 5+ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n"
            "‚Ä¢ üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 5‚ÇΩ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ üéÅ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"
        )
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="premium")
        )
        builder.row(
            InlineKeyboardButton(text="üéÅ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_code")
        )
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="premium")
        )
        
        await callback.message.edit_text(
            benefits_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing premium benefits: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "payment_history")
async def show_payment_history(callback: CallbackQuery, user, **kwargs):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        payments = await payment_service.get_user_payments(user.id, limit=20)
        
        if not payments:
            history_text = (
                "üìã **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é!"
            )
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="premium")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="premium")]
                ]
            )
            
            await callback.message.edit_text(
                history_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
        history_text = "üìã **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π**\n\n"
        
        for payment in payments:
            status_icon = {
                "completed": "‚úÖ",
                "pending": "‚è≥", 
                "failed": "‚ùå",
                "refunded": "üîÑ"
            }.get(payment.status, "‚ùì")
            
            payment_date = payment.created_at.strftime("%d.%m.%Y %H:%M")
            
            history_text += (
                f"{status_icon} **{payment.amount} Stars** - {payment.product_type}\n"
                f"üìÖ {payment_date} | {payment.payment_method.value}\n"
            )
            
            if payment.status == "completed" and hasattr(payment, 'subscription'):
                history_text += f"‚ú® Premium –¥–æ {payment.subscription.expires_at.strftime('%d.%m.%Y')}\n"
            
            history_text += "\n"
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üìß –ó–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ–∫", callback_data="request_receipt")
        )
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="premium")
        )
        
        await callback.message.edit_text(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing payment history: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)


@router.callback_query(F.data == "disable_auto_renew")
async def disable_auto_renew(callback: CallbackQuery, user, **kwargs):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    try:
        success = await subscription_service.disable_auto_renew(user.id)
        
        if success:
            await callback.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ", show_alert=True)
            await show_premium_info(callback, user)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await bot_logger.log_update(
                update_type="auto_renew_disabled",
                user_id=user.telegram_id
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error disabling auto renew: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "enable_auto_renew")
async def enable_auto_renew(callback: CallbackQuery, user, **kwargs):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    try:
        success = await subscription_service.enable_auto_renew(user.id)
        
        if success:
            await callback.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", show_alert=True)
            await show_premium_info(callback, user)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await bot_logger.log_update(
                update_type="auto_renew_enabled",
                user_id=user.telegram_id
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error enabling auto renew: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "renew_subscription")
async def renew_subscription(callback: CallbackQuery, user, **kwargs):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        current_subscription = await user_service.get_user_subscription(user.telegram_id)
        
        if not current_subscription:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        renew_text = (
            "üîÑ **–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            f"üìã **–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:** {current_subscription.subscription_type.value}\n"
            f"üìÖ **–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:** {current_subscription.expires_at.strftime('%d.%m.%Y')}\n\n"
            
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n\n"
            "üí° **–ü—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏:**\n"
            "‚Ä¢ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ\n"
            "‚Ä¢ –î–µ–π—Å—Ç–≤—É—é—â–∞—è —Å–∫–∏–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n"
            "‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"
        )
        
        keyboard = get_premium_keyboard()
        
        await callback.message.edit_text(
            renew_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error renewing subscription: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def format_price_rub(stars: int) -> int:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Stars –≤ —Ä—É–±–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å: 1 Star ‚âà 1.3 —Ä—É–±–ª–µ–π
    return int(stars * 1.3)


def calculate_potential_savings(user_stats) -> int:
    """–†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ë–∞–∑–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    base_savings = 0
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
    if user_stats.total_downloads > 50:
        base_savings += 500  # –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
    
    if user_stats.total_searches > 100:
        base_savings += 300  # –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏
    
    if user_stats.playlists_count > 5:
        base_savings += 200  # –≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º—É–∑—ã–∫–æ–π
    
    return min(base_savings, 2000)  # –ú–∞–∫—Å–∏–º—É–º 2000‚ÇΩ —ç–∫–æ–Ω–æ–º–∏–∏


def convert_stars_to_crypto(stars: int, currency: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Stars –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
    
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∞—Ç—å —Å API)
    rates = {
        "TON": stars * 0.15,    # 1 Star ‚âà 0.15 TON
        "BTC": stars * 0.000003, # 1 Star ‚âà 0.000003 BTC  
        "USDT": stars * 0.013,   # 1 Star ‚âà $0.013
        "USDC": stars * 0.013    # 1 Star ‚âà $0.013
    }
    
    amount = rates.get(currency, stars * 0.013)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
    if currency in ["BTC"]:
        return f"{amount:.8f}"
    elif currency in ["TON", "USDT", "USDC"]:
        return f"{amount:.2f}"
    else:
        return f"{amount:.4f}"


def format_subscription_end_date(duration_days: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    from datetime import datetime, timedelta
    
    end_date = datetime.utcnow() + timedelta(days=duration_days)
    return end_date.strftime("%d.%m.%Y")


from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup