"""
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""
from typing import List, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.services.music.base import SearchResult
from app.schemas.playlist import PlaylistResponse


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏", callback_data="search_music"),
        InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ", callback_data="trending")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="my_playlists"),
        InlineKeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")
    )
    builder.row(
        InlineKeyboardButton(text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    builder.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    builder.row(
        InlineKeyboardButton(text="üíé Premium", callback_data="premium")
    )
    
    return builder.as_markup()


def get_search_results_keyboard(
    results: List[SearchResult], 
    page: int = 0, 
    per_page: int = 5
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_results = results[start_idx:end_idx]
    
    for i, result in enumerate(page_results):
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        title = result.title[:30] + "..." if len(result.title) > 30 else result.title
        artist = result.artist[:20] + "..." if len(result.artist) > 20 else result.artist
        
        # –ò–∫–æ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_icon = {
            "ultra": "üíé",
            "high": "üîπ", 
            "medium": "üî∏",
            "low": "üîª"
        }.get(result.audio_quality.value.lower(), "üéµ")
        
        # –ò–∫–æ–Ω–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_icon = {
            "vk_audio": "üéµ",
            "youtube": "üì∫",
            "spotify": "üé∂"
        }.get(result.source.value.lower(), "üéß")
        
        button_text = f"{quality_icon} {artist} - {title}"
        callback_data = f"track:{result.external_id}:{result.source.value}"
        
        builder.row(
            InlineKeyboardButton(text=button_text, callback_data=callback_data)
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_page:{page-1}")
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    total_pages = (len(results) - 1) // per_page + 1
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"üìÑ {page + 1}/{total_pages}", 
            callback_data="current_page"
        )
    )
    
    if end_idx < len(results):
        nav_buttons.append(
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"search_page:{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    builder.row(
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_track_actions_keyboard(
    track_id: str, 
    source: str,
    is_premium: bool = False,
    in_favorites: bool = False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ç—Ä–µ–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(
            text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", 
            callback_data=f"download:{track_id}:{source}"
        ),
        InlineKeyboardButton(
            text="üíñ" if not in_favorites else "üíî",
            callback_data=f"toggle_favorite:{track_id}:{source}"
        )
    )
    
    # –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç", 
            callback_data=f"add_to_playlist:{track_id}:{source}"
        ),
        InlineKeyboardButton(
            text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
            callback_data=f"share:{track_id}:{source}"
        )
    )
    
    # –ü–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏
    builder.row(
        InlineKeyboardButton(
            text="üéµ –ü–æ—Ö–æ–∂–∏–µ", 
            callback_data=f"similar:{track_id}:{source}"
        ),
        InlineKeyboardButton(
            text="üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", 
            callback_data=f"artist:{track_id}:{source}"
        )
    )
    
    # Premium –æ–ø—Ü–∏–∏
    if is_premium:
        builder.row(
            InlineKeyboardButton(
                text="üíé 320kbps", 
                callback_data=f"download_320kbps:{track_id}:{source}"
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_playlists_keyboard(
    playlists: List[PlaylistResponse], 
    page: int = 0, 
    per_page: int = 8
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_playlists = playlists[start_idx:end_idx]
    
    # –ü–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ –¥–≤–∞ –≤ —Ä—è–¥
    for i in range(0, len(page_playlists), 2):
        row_buttons = []
        
        # –ü–µ—Ä–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –≤ —Ä—è–¥—É
        playlist = page_playlists[i]
        title = playlist.title[:25] + "..." if len(playlist.title) > 25 else playlist.title
        button_text = f"üìã {title} ({playlist.tracks_count})"
        
        row_buttons.append(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"playlist:{playlist.id}"
            )
        )
        
        # –í—Ç–æ—Ä–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(page_playlists):
            playlist2 = page_playlists[i + 1]
            title2 = playlist2.title[:25] + "..." if len(playlist2.title) > 25 else playlist2.title
            button_text2 = f"üìã {title2} ({playlist2.tracks_count})"
            
            row_buttons.append(
                InlineKeyboardButton(
                    text=button_text2,
                    callback_data=f"playlist:{playlist2.id}"
                )
            )
        
        builder.row(*row_buttons)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"playlists_page:{page-1}")
        )
    
    total_pages = (len(playlists) - 1) // per_page + 1 if playlists else 1
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"{page + 1}/{total_pages}", 
            callback_data="current_playlists_page"
        )
    )
    
    if end_idx < len(playlists):
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"playlists_page:{page+1}")
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist"),
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤", callback_data="search_playlists")
    )
    
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_playlist_actions_keyboard(
    playlist_id: str,
    is_owner: bool = False,
    is_empty: bool = False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    builder = InlineKeyboardBuilder()
    
    if not is_empty:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
        builder.row(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å –≤—Å–µ", 
                callback_data=f"play_playlist:{playlist_id}"
            ),
            InlineKeyboardButton(
                text="üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å", 
                callback_data=f"shuffle_playlist:{playlist_id}"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üìã –¢—Ä–µ–∫–∏", 
                callback_data=f"playlist_tracks:{playlist_id}"
            ),
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                callback_data=f"playlist_stats:{playlist_id}"
            )
        )
    
    # –î–µ–π—Å—Ç–≤–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if is_owner:
        builder.row(
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data=f"edit_playlist:{playlist_id}"
            ),
            InlineKeyboardButton(
                text="üë• –î–æ—Å—Ç—É–ø", 
                callback_data=f"playlist_sharing:{playlist_id}"
            )
        )
        
        if not is_empty:
            builder.row(
                InlineKeyboardButton(
                    text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", 
                    callback_data=f"export_playlist:{playlist_id}"
                ),
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=f"delete_playlist:{playlist_id}"
                )
            )
    else:
        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —á—É–∂–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        builder.row(
            InlineKeyboardButton(
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data=f"copy_playlist:{playlist_id}"
            ),
            InlineKeyboardButton(
                text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", 
                callback_data=f"share_playlist:{playlist_id}"
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–ª–µ–π–ª–∏—Å—Ç–∞–º", callback_data="my_playlists"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_premium_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    builder.row(
        InlineKeyboardButton(
            text="‚≠ê 1 –º–µ—Å—è—Ü - 150 Stars", 
            callback_data="premium_plan:1month"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚≠ê 3 –º–µ—Å—è—Ü–∞ - 400 Stars (-12%)", 
            callback_data="premium_plan:3months"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚≠ê 1 –≥–æ–¥ - 1400 Stars (-23%)", 
            callback_data="premium_plan:1year"
        )
    )
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    builder.row(
        InlineKeyboardButton(
            text="üíé –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π", 
            callback_data="crypto_payment"
        )
    )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    builder.row(
        InlineKeyboardButton(
            text="‚ÑπÔ∏è –ß—Ç–æ –¥–∞—ë—Ç Premium", 
            callback_data="premium_benefits"
        ),
        InlineKeyboardButton(
            text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", 
            callback_data="promo_code"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_premium_offer_keyboard() -> InlineKeyboardMarkup:
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º Premium"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üíé –ü–æ–ª—É—á–∏—Ç—å Premium", 
            callback_data="premium"
        )
    )
    
    return builder.as_markup()


def get_renew_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
            callback_data="premium"
        )
    )
    
    return builder.as_markup()


def get_payment_method_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="‚≠ê Telegram Stars", 
            callback_data="payment_method:stars"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üíé CryptoBot (TON, BTC, USDT)", 
            callback_data="payment_method:crypto"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="premium")
    )
    
    return builder.as_markup()


def get_crypto_currencies_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üíé TON", callback_data="crypto_currency:TON"),
        InlineKeyboardButton(text="‚Çø BTC", callback_data="crypto_currency:BTC")
    )
    builder.row(
        InlineKeyboardButton(text="üíµ USDT", callback_data="crypto_currency:USDT"),
        InlineKeyboardButton(text="‚ö° USDC", callback_data="crypto_currency:USDC")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="premium")
    )
    
    return builder.as_markup()


def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üéµ –ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ", 
            callback_data="settings:quality"
        ),
        InlineKeyboardButton(
            text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", 
            callback_data="settings:notifications"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üåê –Ø–∑—ã–∫", 
            callback_data="settings:language"
        ),
        InlineKeyboardButton(
            text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", 
            callback_data="settings:recommendations"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üóÑÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
            callback_data="settings:export_data"
        ),
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
            callback_data="settings:delete_account"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_quality_settings_keyboard(current_quality: str = "192kbps") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ"""
    builder = InlineKeyboardBuilder()
    
    qualities = [
        ("üîª 128kbps", "128kbps"),
        ("üî∏ 192kbps", "192kbps"), 
        ("üîπ 256kbps", "256kbps"),
        ("üíé 320kbps", "320kbps")
    ]
    
    for text, quality in qualities:
        if quality == current_quality:
            text = f"‚úÖ {text}"
        
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=f"set_quality:{quality}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings")
    )
    
    return builder.as_markup()


def get_confirmation_keyboard(action: str, item_id: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –î–∞",
            callback_data=f"confirm:{action}:{item_id}"
        ),
        InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç",
            callback_data=f"cancel:{action}"
        )
    )
    
    return builder.as_markup()


def get_add_to_playlist_keyboard(
    playlists: List[PlaylistResponse], 
    track_id: str, 
    source: str
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç"""
    builder = InlineKeyboardBuilder()
    
    # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã
    for playlist in playlists[:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 8 –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        title = playlist.title[:30] + "..." if len(playlist.title) > 30 else playlist.title
        builder.row(
            InlineKeyboardButton(
                text=f"üìã {title}",
                callback_data=f"add_track_to_playlist:{playlist.id}:{track_id}:{source}"
            )
        )
    
    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç",
            callback_data=f"create_playlist_with_track:{track_id}:{source}"
        )
    )
    
    # –ù–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"track:{track_id}:{source}"
        )
    )
    
    return builder.as_markup()


def get_trending_categories_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –º—É–∑—ã–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üî• –¢–æ–ø –Ω–µ–¥–µ–ª–∏", callback_data="trending:week"),
        InlineKeyboardButton(text="üìà –í–æ—Å—Ö–æ–¥—è—â–∏–µ", callback_data="trending:rising")
    )
    builder.row(
        InlineKeyboardButton(text="üÜï –ù–æ–≤–∏–Ω–∫–∏", callback_data="trending:new"),
        InlineKeyboardButton(text="üëë –ö–ª–∞—Å—Å–∏–∫–∞", callback_data="trending:classic")
    )
    builder.row(
        InlineKeyboardButton(text="üé≠ –ü–æ –∂–∞–Ω—Ä–∞–º", callback_data="genres"),
        InlineKeyboardButton(text="üåç –ü–æ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="countries")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_genres_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    genres = [
        ("üé∏ Rock", "rock"),
        ("üé§ Pop", "pop"),
        ("üéµ Hip-Hop", "hip-hop"),
        ("üéπ Electronic", "electronic"),
        ("üé∫ Jazz", "jazz"),
        ("üéª Classical", "classical"),
        ("ü™ï Folk", "folk"),
        ("üé∑ Blues", "blues")
    ]
    
    # –ü–æ –¥–≤–∞ –∂–∞–Ω—Ä–∞ –≤ —Ä—è–¥
    for i in range(0, len(genres), 2):
        row_buttons = [
            InlineKeyboardButton(
                text=genres[i][0],
                callback_data=f"genre:{genres[i][1]}"
            )
        ]
        
        if i + 1 < len(genres):
            row_buttons.append(
                InlineKeyboardButton(
                    text=genres[i + 1][0],
                    callback_data=f"genre:{genres[i + 1][1]}"
                )
            )
        
        builder.row(*row_buttons)
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trending")
    )
    
    return builder.as_markup()


def get_inline_search_keyboard(track: SearchResult) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è inline —Ä–µ–∂–∏–º–∞"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ –≤ —á–∞—Ç
    builder.row(
        InlineKeyboardButton(
            text="üéß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç",
            callback_data=f"send_to_chat:{track.external_id}:{track.source.value}"
        )
    )
    
    return builder.as_markup()


def get_profile_keyboard(is_premium: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats"),
        InlineKeyboardButton(text="üéµ –ò—Å—Ç–æ—Ä–∏—è", callback_data="my_history")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites"),
        InlineKeyboardButton(text="üìã –ü–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="my_playlists")
    )
    
    if is_premium:
        builder.row(
            InlineKeyboardButton(text="üíé Premium —Å—Ç–∞—Ç—É—Å", callback_data="premium_status"),
            InlineKeyboardButton(text="üì± –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_data")
        )
    else:
        builder.row(
            InlineKeyboardButton(text="üíé –ü–æ–ª—É—á–∏—Ç—å Premium", callback_data="premium")
        )
    
    builder.row(
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_help_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–º–æ—â–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ùì FAQ", callback_data="faq"),
        InlineKeyboardButton(text="üìò –ì–∏–¥", callback_data="guide")
    )
    
    builder.row(
        InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/support"),
        InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª", url="https://t.me/musicbot_news")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")
    )
    
    return builder.as_markup()


def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users"),
        InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin:analytics")
    )
    
    builder.row(
        InlineKeyboardButton(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin:payments"),
        InlineKeyboardButton(text="üéµ –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin:content")
    )
    
    builder.row(
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin:settings")
    )
    
    builder.row(
        InlineKeyboardButton(text="üåê –í–µ–±-–ø–∞–Ω–µ–ª—å", url="https://admin.musicbot.com")
    )
    
    return builder.as_markup()


def get_broadcast_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast:all"),
        InlineKeyboardButton(text="üíé Premium", callback_data="broadcast:premium")
    )
    
    builder.row(
        InlineKeyboardButton(text="üÜì Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="broadcast:free"),
        InlineKeyboardButton(text="üò¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="broadcast:inactive")
    )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:main")
    )
    
    return builder.as_markup()


def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    
    return builder.as_markup()


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏

def add_navigation_buttons(
    builder: InlineKeyboardBuilder,
    page: int,
    total_pages: int,
    callback_prefix: str,
    back_callback: str = "main_menu"
) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"{callback_prefix}:{page-1}"
            )
        )
    
    nav_buttons.append(
        InlineKeyboardButton(
            text=f"{page + 1}/{total_pages}",
            callback_data="current_page"
        )
    )
    
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"{callback_prefix}:{page+1}"
            )
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
    )


def create_paginated_keyboard(
    items: List[tuple],  # (text, callback_data)
    page: int = 0,
    per_page: int = 8,
    callback_prefix: str = "page",
    back_callback: str = "main_menu"
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    builder = InlineKeyboardBuilder()
    
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_items = items[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for text, callback_data in page_items:
        builder.row(
            InlineKeyboardButton(text=text, callback_data=callback_data)
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    total_pages = (len(items) - 1) // per_page + 1 if items else 1
    add_navigation_buttons(builder, page, total_pages, callback_prefix, back_callback)
    
    return builder.as_markup()