"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

from app.services.music.base import (
    BaseMusicService,
    SearchResult,
    DownloadResult,
    RateLimiter,
    ServiceError,
    RateLimitError,
    TrackNotFoundError,
    DownloadError,
    AuthenticationError
)

from app.services.music.vk_audio import VKAudioService
from app.services.music.youtube import YouTubeMusicService
from app.services.music.spotify import SpotifyService
from app.services.music.aggregator import (
    MusicAggregator,
    SearchStrategy,
    ServiceConfig
)

__all__ = [
    # –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    "BaseMusicService",
    "SearchResult", 
    "DownloadResult",
    "RateLimiter",
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    "ServiceError",
    "RateLimitError",
    "TrackNotFoundError", 
    "DownloadError",
    "AuthenticationError",
    
    # –°–µ—Ä–≤–∏—Å—ã
    "VKAudioService",
    "YouTubeMusicService",
    "SpotifyService",
    
    # –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä
    "MusicAggregator",
    "SearchStrategy",
    "ServiceConfig"
]


def create_music_aggregator() -> MusicAggregator:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    return MusicAggregator()


async def test_all_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    async with create_music_aggregator() as aggregator:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        health_results = await aggregator.health_check_all()
        
        print("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:")
        for service, health in health_results.items():
            status = health.get('status', 'unknown')
            emoji = "‚úÖ" if status == 'healthy' else "‚ùå" if status == 'unhealthy' else "‚ö†Ô∏è"
            print(f"  {emoji} {service}: {status}")
            
            if health.get('error'):
                print(f"    –û—à–∏–±–∫–∞: {health['error']}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        print(f"\nüîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...")
        test_queries = ["imagine dragons believer", "billie eilish", "test"]
        
        for query in test_queries:
            print(f"\n  –ó–∞–ø—Ä–æ—Å: '{query}'")
            results = await aggregator.search(query, limit=5)
            
            if results:
                print(f"    –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                for i, result in enumerate(results[:3], 1):
                    print(f"    {i}. {result.artist} - {result.title} ({result.source.value})")
                    if result.download_url:
                        print(f"       üì• –°—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:")
        stats = aggregator.get_service_stats()
        
        for service, service_stats in stats.items():
            print(f"  {service}:")
            print(f"    –ü–æ–∏—Å–∫–æ–≤: {service_stats['total_searches']}")
            print(f"    –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {service_stats['success_rate']:.1%}")
            print(f"    –ó–¥–æ—Ä–æ–≤—å–µ: {service_stats['health_score']:.2f}")
            print(f"    –°—Ä. –≤—Ä–µ–º—è: {service_stats['avg_response_time']:.2f}—Å")


if __name__ == "__main__":
    import asyncio
    asyncio.run(test_all_services())