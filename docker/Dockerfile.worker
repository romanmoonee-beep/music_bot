# docker/Dockerfile.worker
FROM python:3.12-slim

# Метаданные
LABEL maintainer="Music Bot Team"
LABEL description="Music Universe Bot - Celery Worker"
LABEL version="1.0.0"

# Устанавливаем системные зависимости
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    ffmpeg \
    git \
    libffi-dev \
    libssl-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Создаем пользователя для запуска приложения
RUN useradd --create-home --shell /bin/bash worker

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем файлы зависимостей
COPY requirements.txt pyproject.toml ./

# Обновляем pip и устанавливаем Poetry
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir poetry

# Конфигурируем Poetry
RUN poetry config virtualenvs.create false

# Устанавливаем зависимости Python + дополнительные для обработки медиа
RUN poetry install --only=main --no-dev && \
    pip install --no-cache-dir librosa soundfile

# Копируем исходный код
COPY app/ ./app/
COPY alembic/ ./alembic/
COPY alembic.ini ./

# Создаем необходимые директории
RUN mkdir -p /app/logs /app/temp

# Устанавливаем права доступа
RUN chown -R worker:worker /app

# Переключаемся на пользователя worker
USER worker

# Переменные окружения
ENV PYTHONPATH=/app
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV C_FORCE_ROOT=1

# Health check
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD celery -A app.tasks.celery inspect ping || exit 1

# Команда по умолчанию (переопределяется в docker-compose)
CMD ["celery", "-A", "app.tasks.celery", "worker", "--loglevel=info", "--concurrency=4"]