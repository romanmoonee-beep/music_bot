#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

from app.core.config import settings
from app.core.database import init_database, close_database, db_manager
from app.core.logging import get_logger
from app.models import get_all_models
import app.models  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏

logger = get_logger(__name__)


async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await db_manager.create_all_tables()
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        raise


async def check_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        is_connected = await db_manager.check_connection()
        if is_connected:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def get_database_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.core.database import get_database_stats
        stats = await get_database_stats()
        
        logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"  üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ: {stats['database_name']}")
        logger.info(f"  üìè –†–∞–∑–º–µ—Ä: {stats['database_size']}")
        logger.info(f"  üìã –¢–∞–±–ª–∏—Ü: {stats['tables_count']}")
        logger.info(f"  üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {stats['active_connections']}")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î: {e}")


async def create_initial_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        from app.core.database import get_session
        from app.models.user import User, UserStatus, SubscriptionType
        from app.models.subscription import PromoCode
        from datetime import datetime, timezone
        
        async with get_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            existing_users = await User.count(session)
            if existing_users > 0:
                logger.info(f"üìä –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if settings.DEBUG:
                admin_user = User(
                    telegram_id=123456789,
                    username="admin",
                    first_name="Admin",
                    last_name="User",
                    status=UserStatus.PREMIUM,
                    subscription_type=SubscriptionType.PREMIUM_1Y,
                    subscription_expires_at=datetime(2030, 12, 31, tzinfo=timezone.utc),
                    language_code="ru"
                )
                session.add(admin_user)
                logger.info("üëë –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
            promo_codes = [
                {
                    "code": "WELCOME50",
                    "description": "–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É",
                    "discount_type": "percentage",
                    "discount_value": 50,
                    "usage_limit": 1000,
                    "user_limit": 1,
                    "is_active": True
                },
                {
                    "code": "TESTFREE",
                    "description": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)",
                    "discount_type": "free",
                    "discount_value": 100,
                    "usage_limit": 100,
                    "user_limit": 1,
                    "is_active": settings.DEBUG
                }
            ]
            
            for promo_data in promo_codes:
                promo = PromoCode(**promo_data)
                session.add(promo)
            
            logger.info(f"üé´ –°–æ–∑–¥–∞–Ω–æ {len(promo_codes)} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
            
            await session.commit()
            logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def setup_extensions():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL"""
    try:
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL...")
        
        from app.core.database import get_session
        from sqlalchemy import text
        
        async with get_session() as session:
            # UUID —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            await session.execute(text('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"'))
            
            # –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            await session.execute(text('CREATE EXTENSION IF NOT EXISTS "unaccent"'))
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏
            await session.execute(text('CREATE EXTENSION IF NOT EXISTS "intarray"'))
            
            await session.commit()
            
        logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è PostgreSQL: {e}")


async def create_indexes():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        from app.core.database import get_session
        from sqlalchemy import text
        
        async with get_session() as session:
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            indexes = [
                """
                CREATE INDEX IF NOT EXISTS idx_tracks_fulltext 
                ON tracks USING gin(to_tsvector('russian', title || ' ' || artist || ' ' || coalesce(album, '')))
                """,
                
                """
                CREATE INDEX IF NOT EXISTS idx_playlists_fulltext 
                ON playlists USING gin(to_tsvector('russian', name || ' ' || coalesce(description, '')))
                """,
                
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                """
                CREATE INDEX IF NOT EXISTS idx_analytics_events_time_user 
                ON analytics_events (event_timestamp DESC, user_id) 
                WHERE user_id IS NOT NULL
                """,
                
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                """
                CREATE INDEX IF NOT EXISTS idx_users_active_premium 
                ON users (last_activity_at DESC) 
                WHERE status = 'premium' AND subscription_expires_at > NOW()
                """,
            ]
            
            for index_sql in indexes:
                try:
                    await session.execute(text(index_sql))
                except Exception as idx_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {idx_error}")
            
            await session.commit()
            
        logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    logger.info(f"üìç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.ENVIRONMENT}")
    logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.POSTGRES_DB}")
    logger.info(f"üè† –°–µ—Ä–≤–µ—Ä: {settings.POSTGRES_SERVER}:{settings.POSTGRES_PORT}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await init_database()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not await check_connection():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        await setup_extensions()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        await create_tables()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        await create_indexes()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î
        await get_database_info()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await create_initial_data()
        
        logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
        
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await close_database()


async def drop_all():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–û–°–¢–û–†–û–ñ–ù–û!)"""
    logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü!")
    
    try:
        await init_database()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if settings.ENVIRONMENT == "production":
            logger.error("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
            return False
        
        await db_manager.drop_all_tables()
        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False
        
    finally:
        await close_database()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument(
        "--drop", 
        action="store_true", 
        help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º"
    )
    parser.add_argument(
        "--drop-only", 
        action="store_true", 
        help="–¢–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã"
    )
    
    args = parser.parse_args()
    
    if args.drop_only:
        success = asyncio.run(drop_all())
        sys.exit(0 if success else 1)
    
    if args.drop:
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
        asyncio.run(drop_all())
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    success = asyncio.run(main())
    sys.exit(0 if success else 1)